var UNPContentWrapper;
(function (UNPContentWrapper) {
    var History = (function () {
        function History() {
        }
        History.MAX_HISTORY_LENGHT = 1000;
        History.MAX_HISTORY_LENGTH_REACHED = "MAX HISTORY REACHED";
        History.HistoryArray = new Array();
        History.RecordHistory = function (HistoryString) {
            if (History.HistoryArray.length < History.MAX_HISTORY_LENGHT) {
                History.HistoryArray.push(HistoryString);
            }
            else {
                if (History.HistoryArray[History.HistoryArray.length - 1] !== History.MAX_HISTORY_LENGTH_REACHED) {
                    History.HistoryArray.push(History.MAX_HISTORY_LENGTH_REACHED);
                }
            }
        };
        History.GetHistoryString = function () {
            return History.HistoryArray.join(",");
        };
        History.GetHistory = function () {
            return History.HistoryArray;
        };
        return History;
    })();
    UNPContentWrapper.History = History;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var SlideChoiceViewModel = (function () {
        function SlideChoiceViewModel(currentSlideID, slideViewHistory, previousSlideID) {
            var _this = this;
            this.SetInitializationValues = function (values) {
                _this.InitializationValues = _this.AddInitializationValueDefaults(values).DeepCopy();
            };
            this.SetSlideReturnValues = function (values) {
                _this.SlideReturnValues = values.DeepCopy();
            };
            this.GetSlideId = function () {
                return _this.SlideChoice;
            };
            this.GetInitialzationValues = function () {
                return _this.InitializationValues;
            };
            this.GetClickHandlers = function () {
                return _this.ClickHandlers;
            };
            this.GetSlideReturnValues = function () {
                return _this.SlideReturnValues;
            };
            this.AddToSlideHistory = function (slide) {
                if (slide != UNPContentWrapper.SlideIDs.NoSlide) {
                    _this.SlideViewHistory.push(slide);
                }
            };
            this.GetLastSlideViewed = function () {
                if (_this.SlideViewHistory.length != 0) {
                    return _this.SlideViewHistory[_this.SlideViewHistory.length - 1];
                }
                else {
                    return UNPContentWrapper.SlideIDs.NoSlide;
                }
            };
            this.RemoveLastSlideViewed = function () {
                if (_this.SlideViewHistory.length != 0) {
                    return _this.SlideViewHistory.pop();
                }
                else {
                    return UNPContentWrapper.SlideIDs.NoSlide;
                }
            };
            this.GetSlideHistoryArray = function () {
                return _this.SlideViewHistory;
            };
            var machineSlideViewCounter = UNPContentWrapper.RegistryHelpers.IncrementHKLMRegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateSlideViewRegistryLocation(), UNPContentWrapper.PrivacyHelpers.GetSlideNameFromSlide(currentSlideID));
            var userSlideViewCounter = UNPContentWrapper.RegistryHelpers.IncrementHKCURegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKCUContentLocalStateSlideViewRegistryLocation(), UNPContentWrapper.PrivacyHelpers.GetSlideNameFromSlide(currentSlideID));
            UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.TelemetrySchema.SlideView, UNPContentWrapper.PrivacyHelpers.GetSlideNameFromSlide(previousSlideID), UNPContentWrapper.PrivacyHelpers.GetSlideNameFromSlide(currentSlideID), machineSlideViewCounter.toString(), userSlideViewCounter.toString());
            UNPContentWrapper.History.RecordHistory("SlideView: " + UNPContentWrapper.PrivacyHelpers.GetSlideNameFromSlide(currentSlideID));
            this.SlideChoice = currentSlideID;
            this.InitializationValues = null;
            this.ClickHandlers = null;
            this.SlideReturnValues = null;
            this.SlideViewHistory = slideViewHistory;
            this.AddToSlideHistory(previousSlideID);
        }
        SlideChoiceViewModel.prototype.AddInitializationValueDefaults = function (CurrentDictionary) {
            var CurrentExperimentId = UPXContent.GetExperimentId();
            if (CurrentExperimentId !== "") {
                CurrentDictionary.add(UNPContentWrapper.InitializationValueNames.ABExperimentID, CurrentExperimentId);
                CurrentDictionary.add(UNPContentWrapper.InitializationValueNames.ABExperimentVariation, UNPContentWrapper.CommonHelpers.GetExperimentVariation(CurrentExperimentId));
            }
            return CurrentDictionary;
        };
        return SlideChoiceViewModel;
    })();
    UNPContentWrapper.SlideChoiceViewModel = SlideChoiceViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var ClickHandlersBase = (function () {
        function ClickHandlersBase(CurrentViewModel) {
            this.GetClickHandlers = function () { return null; };
            this.LogIDOnClick = function (ButtonName, buttonFunction, CurrentSlideID) {
                var machineButtonClickCounter = UNPContentWrapper.RegistryHelpers.IncrementHKLMRegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateButtonClickRegistryLocation(), UNPContentWrapper.PrivacyHelpers.GetSlideNameFromSlide(CurrentSlideID) + ":" + ButtonName);
                var userButtonClickCounter = UNPContentWrapper.RegistryHelpers.IncrementHKCURegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKCUContentLocalStateButtonClickRegistryLocation(), UNPContentWrapper.PrivacyHelpers.GetSlideNameFromSlide(CurrentSlideID) + ":" + ButtonName);
                UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.TelemetrySchema.ButtonClick, UNPContentWrapper.PrivacyHelpers.GetSlideNameFromSlide(CurrentSlideID), ButtonName, machineButtonClickCounter.toString(), userButtonClickCounter.toString());
                window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, UNPContentWrapper.LogMessages.ButtonClickWithoutName + ButtonName);
                UNPContentWrapper.History.RecordHistory("ButtonClick: " + ButtonName);
                return buttonFunction();
            };
            this.CurrentView = CurrentViewModel;
        }
        return ClickHandlersBase;
    })();
    UNPContentWrapper.ClickHandlersBase = ClickHandlersBase;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    UNPContentWrapper.CriticalTelemetry = true;
    UNPContentWrapper.NormalTelemetry = false;
    var Telemetry = (function () {
        function Telemetry() {
        }
        Telemetry.Send = function (isCritical, schema, values) {
            var succeeded = true;
            var CurrentExperimentId = UPXContent.GetExperimentId();
            var isOnline = window.location.href.indexOf("http") === 0 ? "TRUE" : "FALSE";
            var CurrentExperimentVariation;
            if (CurrentExperimentId === "") {
                CurrentExperimentId = "Default";
                CurrentExperimentVariation = "Default";
            }
            else {
                CurrentExperimentVariation = UNPContentWrapper.CommonHelpers.GetExperimentVariation(CurrentExperimentId).toString();
            }
            switch (values.length) {
                case 1:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 2:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 3:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 4:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 5:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 6:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 7:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 8:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 9:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 10:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 11:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 12:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 13:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 14:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 15:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 16:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 17:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 18:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 19:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 20:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 21:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 22:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 23:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 24:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 25:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], values[24], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], values[24], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 26:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], values[24], values[25], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], values[24], values[25], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 27:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], values[24], values[25], values[26], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], values[24], values[25], values[26], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                case 28:
                    if (isCritical) {
                        window.external.UploadCriticalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], values[24], values[25], values[26], values[27], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    else {
                        window.external.UploadNormalTelemetry(schema, values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20], values[21], values[22], values[23], values[24], values[25], values[26], values[27], isOnline, CurrentExperimentId, CurrentExperimentVariation);
                    }
                    break;
                default:
                    succeeded = false;
            }
            if (succeeded) {
                succeeded = (window.external.GetLastJSError() === UNPContentWrapper.HRESULT.S_OK);
            }
            return succeeded;
        };
        Telemetry.SendTelemetry = function (info) {
            var values = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                values[_i - 1] = arguments[_i];
            }
            if (values.length === info.numberOfValues) {
                return Telemetry.Send(info.isCritical, info.schemaName, values);
            }
            else {
                window.external.LogError(UNPContentWrapper.HRESULT.E_FAIL, "Failed to send telemetry with Schema Name " + info.schemaName + " Telemetry Values did not match predefined keys");
                return false;
            }
        };
        return Telemetry;
    })();
    UNPContentWrapper.Telemetry = Telemetry;
    var TelemetrySchema = (function () {
        function TelemetrySchema(isCritical, schemaName) {
            var valueDescriptions = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                valueDescriptions[_i - 2] = arguments[_i];
            }
            this.schemaName = schemaName;
            this.isCritical = isCritical;
            this.numberOfValues = valueDescriptions.length;
        }
        TelemetrySchema.SlideView = new TelemetrySchema(UNPContentWrapper.NormalTelemetry, "SlideView", "previousSlideID", "currentSlideID", "machineSlideViewCount", "userSlideViewCount");
        TelemetrySchema.ButtonClick = new TelemetrySchema(UNPContentWrapper.NormalTelemetry, "ButtonClick", "currentSlideID", "buttonName", "machineButtonClickCount", "userButtonClickCount");
        TelemetrySchema.ErrorPageShown = new TelemetrySchema(UNPContentWrapper.CriticalTelemetry, "ErrorPageShown", "hResult");
        TelemetrySchema.SessionHistory = new TelemetrySchema(UNPContentWrapper.NormalTelemetry, "SessionHistory", "history", "machineSessionCount", "userSessionCount");
        TelemetrySchema.LandingPageChoice = new TelemetrySchema(UNPContentWrapper.NormalTelemetry, "LandingPageChoice", "machineSessionCount", "userSessionCount");
        TelemetrySchema.ContentError = new TelemetrySchema(UNPContentWrapper.NormalTelemetry, "ContentError", "slideID", "errorCode", "errorMessage");
        TelemetrySchema.UnexpectedWindowSize = new TelemetrySchema(UNPContentWrapper.NormalTelemetry, "UnexpectedWindowSize", "WindowHeigh", "WindowWidth", "MetadataMaxHeight", "MetadataMinHeight", "MetadataMaxWidth", "MetadataMinWidth");
        return TelemetrySchema;
    })();
    UNPContentWrapper.TelemetrySchema = TelemetrySchema;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var CommonDefines = (function () {
        function CommonDefines() {
        }
        CommonDefines.languageBASEfallback = "BASE";
        CommonDefines.languageDefault = "en-US";
        CommonDefines.localeDefault = "us";
        CommonDefines.contentFileName = "index.html";
        CommonDefines.urlFolderSeparator = "/";
        CommonDefines.offlineFolderSeparator = "\\";
        CommonDefines.urlArgumentsSeparator = "?";
        CommonDefines.MetadataJSONFileName = "metadata.json";
        return CommonDefines;
    })();
    UNPContentWrapper.CommonDefines = CommonDefines;
    var ABTestingDefines = (function () {
        function ABTestingDefines() {
        }
        ABTestingDefines.ABTestingMin = 0;
        ABTestingDefines.ABTestingMax = 2147483647;
        ABTestingDefines.ControlGroupExperimentId = "Z";
        ABTestingDefines.InvalidABTestingPercentageLogMessage = "ABTestingValue provided by GetExperimentVariationJson is invalid, using Default Experiment group";
        return ABTestingDefines;
    })();
    UNPContentWrapper.ABTestingDefines = ABTestingDefines;
    var HRESULT = (function () {
        function HRESULT() {
        }
        HRESULT.S_OK = 0;
        HRESULT.E_FAIL = -2147483640;
        HRESULT.E_INVALIDARG = -2147483645;
        HRESULT.E_ILLEGAL_STATE_CHANGE = -2147483635;
        HRESULT.E_FILE_NOT_FOUND = -2147024894;
        HRESULT.E_NOTIMPL = -2147467263;
        return HRESULT;
    })();
    UNPContentWrapper.HRESULT = HRESULT;
    var CloseReason = (function () {
        function CloseReason() {
        }
        CloseReason.User = "User";
        CloseReason.Timeout = "Timeout";
        CloseReason.Error = "Error";
        CloseReason.Other = "Other";
        return CloseReason;
    })();
    UNPContentWrapper.CloseReason = CloseReason;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var Dictionary = (function () {
        function Dictionary() {
            var _this = this;
            this.add = function (Key, Value) {
                var containsKey = _this.ContainsKey(Key);
                if (!containsKey) {
                    _this.keys.push(Key);
                    _this.values.push(Value);
                }
                return !containsKey;
            };
            this.remove = function (Key) {
                var containsKey = _this.ContainsKey(Key);
                if (!containsKey) {
                    var i = _this.GetIndex(Key);
                    _this.keys.splice(i, 1);
                    _this.values.splice(i, 1);
                }
                return !containsKey;
            };
            this.clear = function () {
                while (_this.keys.length != 0) {
                    _this.keys.pop();
                    _this.values.pop();
                }
            };
            this.GetIndex = function (Key) {
                for (var i = 0; i < _this.keys.length; i++) {
                    if (_this.keys[i] == Key) {
                        return i;
                    }
                }
                return (-1);
            };
            this.ContainsKey = function (Key) {
                return -1 !== _this.GetIndex(Key);
            };
            this.GetValueForKey = function (Key) {
                var value = null;
                if (_this.ContainsKey(Key)) {
                    var i = _this.GetIndex(Key);
                    value = _this.values[i];
                }
                return value;
            };
            this.DeepCopy = function () {
                var newDictionary = new Dictionary();
                for (var i = 0; i < _this.keys.length; i++) {
                    newDictionary.add(_this.keys[i], _this.values[i]);
                }
                return newDictionary;
            };
            this.keys = new Array();
            this.values = new Array();
        }
        return Dictionary;
    })();
    UNPContentWrapper.Dictionary = Dictionary;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var OSVersion = (function () {
        function OSVersion(osVersionString) {
            var _this = this;
            this.isGreaterThan = function (compare) {
                return compare !== undefined && compare !== null && (_this.Major > compare.Major || (_this.Major === compare.Major && _this.Minor > compare.Minor) || (_this.Major === compare.Major && _this.Minor === compare.Minor && _this.Build > compare.Build));
            };
            this.isLessThan = function (compare) {
                return compare !== undefined && compare !== null && (_this.Major < compare.Major || (_this.Major === compare.Major && _this.Minor < compare.Minor) || (_this.Major === compare.Major && _this.Minor === compare.Minor && _this.Build < compare.Build));
            };
            this.isEqual = function (compare) {
                return compare !== undefined && compare !== null && _this.Major === compare.Major && _this.Minor === compare.Minor && _this.Build === compare.Build;
            };
            this.isGreaterThanOrEqual = function (compare) {
                return _this.isGreaterThan(compare) || _this.isEqual(compare);
            };
            this.isLessThanOrEqual = function (compare) {
                return _this.isLessThan(compare) || _this.isEqual(compare);
            };
            var osParts = osVersionString.split(".");
            this.Major = Number(osParts[0]);
            this.Minor = Number(osParts[1]);
            this.Build = Number(osParts[2]);
        }
        OSVersion.RS1_MIN_VERSION = "10.0.14393";
        OSVersion.RS1_MAX_VERSION = "10.0.15062";
        return OSVersion;
    })();
    UNPContentWrapper.OSVersion = OSVersion;
    var CommonHelpers = (function () {
        function CommonHelpers() {
        }
        CommonHelpers.GetOfflineMetadataJson = function () {
            var metadataJSONString = window.external.GetContentFileAsString(CommonHelpers.GetPathForFile(false, false, UNPContentWrapper.CommonDefines.MetadataJSONFileName));
            var metadata;
            try {
                metadata = JSON.parse(metadataJSONString);
            }
            catch (e) {
                window.external.LogInfo(UNPContentWrapper.HRESULT.E_INVALIDARG, "Metadata is not valid JSON, returning NULL object");
                metadata = null;
            }
            return metadata;
        };
        CommonHelpers.CheckIfValidWindowSize = function () {
            var CurrentPackageVersion = window.external.GetCurrentPackageVersion();
            var metadata;
            var windowHeight;
            var windowWidth;
            var lastHRESULT = window.external.GetLastJSError();
            if (lastHRESULT == UNPContentWrapper.HRESULT.S_OK && CurrentPackageVersion >= 14) {
                windowHeight = window.external.GetWindowHeight();
                windowWidth = window.external.GetWindowWidth();
                metadata = CommonHelpers.GetOfflineMetadataJson();
                if (metadata !== null &&
                    metadata !== undefined &&
                    windowHeight >= metadata.MinHeight &&
                    windowHeight <= metadata.MaxHeight &&
                    windowWidth >= metadata.MinWidth &&
                    windowWidth <= metadata.MaxWidth) {
                    return UNPContentWrapper.HRESULT.S_OK;
                }
            }
            else if (CurrentPackageVersion < 14) {
                return UNPContentWrapper.HRESULT.E_NOTIMPL;
            }
            UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.TelemetrySchema.UnexpectedWindowSize, (windowHeight === null || windowHeight === undefined) ? "undefined" : windowHeight.toString(), (windowWidth === null || windowWidth === undefined) ? "undefined" : windowWidth.toString(), (metadata === null || metadata === undefined || metadata.MaxHeight === null || metadata.MaxHeight === undefined) ? "undefined" : metadata.MaxHeight.toString(), (metadata === null || metadata === undefined || metadata.MinHeight === null || metadata.MinHeight === undefined) ? "undefined" : metadata.MinHeight.toString(), (metadata === null || metadata === undefined || metadata.MaxWidth === null || metadata.MaxWidth === undefined) ? "undefined" : metadata.MaxWidth.toString(), (metadata === null || metadata === undefined || metadata.MinWidth === null || metadata.MinWidth === undefined) ? "undefined" : metadata.MinWidth.toString());
            return UNPContentWrapper.HRESULT.E_INVALIDARG;
        };
        CommonHelpers.GetRandomNumber = function (min, max) {
            if (min >= max || min < 0 || max < 0) {
                return null;
            }
            var range = max - min;
            return Math.floor((Math.random() * (range + 1)) + min);
        };
        CommonHelpers.GetSeedForExperimentId = function (ExperimentId) {
            var currentValue;
            currentValue = window.external.ReadMachineDWORDRegValue(UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateABTestingSeedValuesRegistryLocation(), ExperimentId);
            if (currentValue === undefined || currentValue === null) {
                currentValue = CommonHelpers.GetRandomNumber(UNPContentWrapper.ABTestingDefines.ABTestingMin, UNPContentWrapper.ABTestingDefines.ABTestingMax);
                UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateABTestingSeedValuesRegistryLocation(), ExperimentId, currentValue);
                var lastHR = window.external.GetLastJSError();
                if (lastHR !== UNPContentWrapper.HRESULT.S_OK) {
                    currentValue = 0;
                }
            }
            return currentValue;
        };
        CommonHelpers.GetExperimentVariation = function (ExperimentId) {
            var ABTestingSeed = CommonHelpers.GetSeedForExperimentId(ExperimentId);
            var SeedChoicePercent = (ABTestingSeed / UNPContentWrapper.ABTestingDefines.ABTestingMax);
            var ExperimentJSON = UPXContent.GetExperimentVariationJson();
            var runningCount = 0;
            for (var key in ExperimentJSON) {
                var KeyValue = key;
                if (!ExperimentJSON.hasOwnProperty(KeyValue))
                    continue;
                var percentage = Number(ExperimentJSON[KeyValue]);
                if (isNaN(percentage)) {
                    window.external.LogInfo(UNPContentWrapper.HRESULT.E_INVALIDARG, UNPContentWrapper.ABTestingDefines.InvalidABTestingPercentageLogMessage);
                }
                if (SeedChoicePercent > runningCount && SeedChoicePercent <= runningCount + percentage) {
                    return key;
                }
                else {
                    runningCount += percentage;
                }
            }
            return UNPContentWrapper.ABTestingDefines.ControlGroupExperimentId;
        };
        CommonHelpers.GetLangLocale = function () {
            var language;
            language = window.external.GetDisplayLanguage();
            if (language === null || language === undefined || window.external.GetLastJSError() !== UNPContentWrapper.HRESULT.S_OK) {
                language = UNPContentWrapper.CommonDefines.languageDefault;
            }
            if (window.external.GetRegion().toUpperCase() === "CA" && language.split('-')[0].toUpperCase() === "EN") {
                return "en-CA";
            }
            return language;
        };
        CommonHelpers.GetLanguageFallback = function (currentLanguage) {
            return UNPContentWrapper.CommonDefines.languageDefault;
        };
        CommonHelpers.CalculateOfflineLangLocaleFallback = function () {
            var langLocale = CommonHelpers.GetLangLocale();
            var langDefault = CommonHelpers.GetLanguageFallback(langLocale);
            var contentFolder = CommonHelpers.GetContentFolder(false);
            var testFile = contentFolder + UNPContentWrapper.CommonDefines.urlFolderSeparator + langLocale + UNPContentWrapper.CommonDefines.urlFolderSeparator + UNPContentWrapper.CommonDefines.contentFileName;
            if (window.external.CheckLocalFileExistence(testFile)) {
                return langLocale;
            }
            testFile = contentFolder + UNPContentWrapper.CommonDefines.urlFolderSeparator + langDefault + UNPContentWrapper.CommonDefines.urlFolderSeparator + UNPContentWrapper.CommonDefines.contentFileName;
            if (window.external.CheckLocalFileExistence(testFile)) {
                return langDefault;
            }
            return null;
        };
        CommonHelpers.IsUserOnline = function () {
            var NetworkStatus;
            NetworkStatus = window.external.GetNetworkStatus();
            if (NetworkStatus === 0) {
                return false;
            }
            else {
                return true;
            }
        };
        CommonHelpers.GetContentFolder = function (isOnline) {
            if (isOnline) {
                return window.external.GetCampaignContentDir();
            }
            else {
                return window.external.GetCampaignContentDir();
            }
        };
        CommonHelpers.GetLocalizedContentFolder = function (isOnline) {
            var contentFolder = CommonHelpers.GetContentFolder(isOnline);
            if (isOnline) {
                return contentFolder + UNPContentWrapper.CommonDefines.urlFolderSeparator + CommonHelpers.GetLangLocale();
            }
            else {
                return contentFolder + UNPContentWrapper.CommonDefines.offlineFolderSeparator + CommonHelpers.CalculateOfflineLangLocaleFallback();
            }
        };
        CommonHelpers.GetPathForFile = function (isOnline, isLocalized, fileName) {
            var contentFolder;
            if (isLocalized) {
                contentFolder = CommonHelpers.GetLocalizedContentFolder(isOnline);
            }
            else {
                contentFolder = CommonHelpers.GetContentFolder(isOnline);
            }
            if (isOnline) {
                return contentFolder + UNPContentWrapper.CommonDefines.urlFolderSeparator + fileName;
            }
            else {
                return contentFolder + UNPContentWrapper.CommonDefines.offlineFolderSeparator + fileName;
            }
        };
        CommonHelpers.IsOSVersionWithinRange = function (osVersionLowString, osVersionHighString) {
            var osVersionLow = new OSVersion(osVersionLowString);
            var osVersionHigh = new OSVersion(osVersionHighString);
            var OsVersionString = window.external.GetOSVersion();
            var osVersionCurrent;
            if (OsVersionString.indexOf(".") === -1) {
                osVersionCurrent = new OSVersion("10.0." + OsVersionString);
            }
            else {
                osVersionCurrent = new OSVersion(OsVersionString);
            }
            return osVersionCurrent.isGreaterThanOrEqual(osVersionLow) && osVersionCurrent.isLessThanOrEqual(osVersionHigh);
        };
        return CommonHelpers;
    })();
    UNPContentWrapper.CommonHelpers = CommonHelpers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var RegistryHelpers = (function () {
        function RegistryHelpers() {
        }
        RegistryHelpers.IncrementRegistryCounter = function (isHKLM, regKey, regValue) {
            var currentValue;
            if (isHKLM) {
                currentValue = window.external.ReadMachineQWORDRegValue(regKey, regValue);
            }
            else {
                currentValue = window.external.ReadUserQWORDRegValue(regKey, regValue);
            }
            if (currentValue === undefined || currentValue === null) {
                currentValue = 0;
            }
            currentValue++;
            if (isHKLM) {
                RegistryHelpers.WriteMachineQWORD(regKey, regValue, currentValue);
            }
            else {
                RegistryHelpers.WriteUserQWORD(regKey, regValue, currentValue);
            }
            var lastHR = window.external.GetLastJSError();
            if (lastHR !== UNPContentWrapper.HRESULT.S_OK) {
                currentValue = 0;
            }
            return currentValue;
        };
        RegistryHelpers.WriteMachineQWORD = function (regKey, regValue, regData) {
            window.external.WriteMachineQWORDRegValue(regKey, regValue, regData);
            var lastHR = window.external.GetLastJSError();
            if (lastHR !== UNPContentWrapper.HRESULT.S_OK) {
                window.external.LogInfo(lastHR, "RegWrite QWORD to HKLM\\" + regKey + " [" + regValue + "] = " + regData + " Failed with HRESULT = " + lastHR);
            }
        };
        RegistryHelpers.WriteUserQWORD = function (regKey, regValue, regData) {
            window.external.WriteUserQWORDRegValue(regKey, regValue, regData);
            var lastHR = window.external.GetLastJSError();
            if (lastHR !== UNPContentWrapper.HRESULT.S_OK) {
                window.external.LogInfo(lastHR, "RegWrite DWORD to HKCU\\" + regKey + " [" + regValue + "] = " + regData + " Failed with HRESULT = " + lastHR);
            }
        };
        RegistryHelpers.WriteMachineDWORD = function (regKey, regValue, regData) {
            window.external.WriteMachineDWORDRegValue(regKey, regValue, regData);
            var lastHR = window.external.GetLastJSError();
            if (lastHR !== UNPContentWrapper.HRESULT.S_OK) {
                window.external.LogInfo(lastHR, "RegWrite DWORD to HKLM\\" + regKey + " [" + regValue + "] = " + regData + " Failed with HRESULT = " + lastHR);
            }
        };
        RegistryHelpers.WriteUserDWORD = function (regKey, regValue, regData) {
            window.external.WriteUserDWORDRegValue(regKey, regValue, regData);
            var lastHR = window.external.GetLastJSError();
            if (lastHR !== UNPContentWrapper.HRESULT.S_OK) {
                window.external.LogInfo(lastHR, "RegWrite DWORD to HKCU\\" + regKey + " [" + regValue + "] = " + regData + " Failed with HRESULT = " + lastHR);
            }
        };
        RegistryHelpers.WriteMachineString = function (regKey, regValue, regData) {
            window.external.WriteMachineStringRegValue(regKey, regValue, regData);
            var lastHR = window.external.GetLastJSError();
            if (lastHR !== UNPContentWrapper.HRESULT.S_OK) {
                window.external.LogInfo(lastHR, "RegWrite String to HKLM\\" + regKey + " [" + regValue + "] = " + regData + " Failed with HRESULT = " + lastHR);
            }
        };
        RegistryHelpers.WriteUserString = function (regKey, regValue, regData) {
            window.external.WriteUserStringRegValue(regKey, regValue, regData);
            var lastHR = window.external.GetLastJSError();
            if (lastHR !== UNPContentWrapper.HRESULT.S_OK) {
                window.external.LogInfo(lastHR, "RegWrite String to HKCU\\" + regKey + " [" + regValue + "] = " + regData + " Failed with HRESULT = " + lastHR);
            }
        };
        RegistryHelpers.IncrementHKLMRegistryCounter = function (regKey, regValue) {
            return RegistryHelpers.IncrementRegistryCounter(true, regKey, regValue);
        };
        RegistryHelpers.IncrementHKCURegistryCounter = function (regKey, regValue) {
            return RegistryHelpers.IncrementRegistryCounter(false, regKey, regValue);
        };
        RegistryHelpers.GetContentLocalStateRegistryLocation = function (isHKLM) {
            var regKey;
            var campaignID = window.external.GetCampaignID();
            if (campaignID !== undefined && campaignID !== null) {
                if (isHKLM) {
                    regKey = RegistryHelpers.UNP_HKLM_REGISTRY_LOCALSTATE + UNPContentWrapper.CommonDefines.offlineFolderSeparator + campaignID + RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_FOLDER;
                }
                else {
                    regKey = RegistryHelpers.UNP_HKCU_REGISTRY_LOCALSTATE + UNPContentWrapper.CommonDefines.offlineFolderSeparator + campaignID + RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_FOLDER;
                }
            }
            return regKey;
        };
        RegistryHelpers.GetHKLMContentLocalStateRegistryLocation = function () {
            window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, RegistryHelpers.GetContentLocalStateRegistryLocation(true));
            return RegistryHelpers.GetContentLocalStateRegistryLocation(true);
        };
        RegistryHelpers.GetHKCUContentLocalStateRegistryLocation = function () {
            window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, RegistryHelpers.GetContentLocalStateRegistryLocation(false));
            return RegistryHelpers.GetContentLocalStateRegistryLocation(false);
        };
        RegistryHelpers.GetHKLMContentLocalStateButtonClickRegistryLocation = function () {
            return RegistryHelpers.GetHKLMContentLocalStateRegistryLocation() + RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_BUTTONCLICK;
        };
        RegistryHelpers.GetHKCUContentLocalStateButtonClickRegistryLocation = function () {
            return RegistryHelpers.GetHKCUContentLocalStateRegistryLocation() + RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_BUTTONCLICK;
        };
        RegistryHelpers.GetHKLMContentLocalStateSlideViewRegistryLocation = function () {
            return RegistryHelpers.GetHKLMContentLocalStateRegistryLocation() + RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_SLIDEVIEWS;
        };
        RegistryHelpers.GetHKCUContentLocalStateSlideViewRegistryLocation = function () {
            return RegistryHelpers.GetHKCUContentLocalStateRegistryLocation() + RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_SLIDEVIEWS;
        };
        RegistryHelpers.GetHKLMContentLocalStateABTestingSeedValuesRegistryLocation = function () {
            return RegistryHelpers.GetHKLMContentLocalStateRegistryLocation() + RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_AB_TESTING;
        };
        RegistryHelpers.GetHRESULTFromRegRead = function (RegReadReturnValue) {
            var returnHresult = window.external.GetLastJSError();
            if (RegReadReturnValue === undefined && returnHresult === UNPContentWrapper.HRESULT.S_OK) {
                returnHresult = UNPContentWrapper.HRESULT.E_FILE_NOT_FOUND;
            }
            return returnHresult;
        };
        RegistryHelpers.UNP_HKLM_REGISTRY_ROOT = "SOFTWARE\\Microsoft\\UNP";
        RegistryHelpers.UNP_HKCU_REGISTRY_ROOT = "SOFTWARE\\Microsoft\\UNP";
        RegistryHelpers.UNP_HKLM_REGISTRY_LOCALSTATE = RegistryHelpers.UNP_HKLM_REGISTRY_ROOT + "\\LocalState";
        RegistryHelpers.UNP_HKCU_REGISTRY_LOCALSTATE = RegistryHelpers.UNP_HKCU_REGISTRY_ROOT + "\\LocalState";
        RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_FOLDER = "\\Content";
        RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_BUTTONCLICK = "\\ClickHandlers";
        RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_SLIDEVIEWS = "\\SlideViews";
        RegistryHelpers.UNP_REGISTRY_LOCALSTATE_CONTENT_AB_TESTING = "\\ExperimentIds";
        RegistryHelpers.UNP_REGISTRY_LOCALSTATE_SESSION_REGVAL = "SessionCounter";
        return RegistryHelpers;
    })();
    UNPContentWrapper.RegistryHelpers = RegistryHelpers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var LanguageSelector = (function () {
        function LanguageSelector() {
        }
        LanguageSelector.ChooseContent = function () {
            var offlineLangLocale = UNPContentWrapper.CommonHelpers.CalculateOfflineLangLocaleFallback();
            var isUserOnline = UNPContentWrapper.CommonHelpers.IsUserOnline();
            var OnlineUXTypeSelectorURL = LanguageSelector.GetOnlineUXTypeSelectorURL();
            if (!isUserOnline || OnlineUXTypeSelectorURL === null || OnlineUXTypeSelectorURL === undefined) {
                LanguageSelector.NavigateToOfflineContent(offlineLangLocale);
            }
            else {
                $.ajax({
                    cache: true,
                    context: offlineLangLocale,
                    url: OnlineUXTypeSelectorURL,
                    type: "GET",
                    dataType: "script"
                }).done(function (data, textStatus, jqXHR) {
                    window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "Script Loaded, Starting timer for falling back to offline content.");
                    var currentLangLocale = this;
                    setTimeout(function (currentLangLocale) {
                        window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "Online content timeout. falling back to offline content.");
                        LanguageSelector.NavigateToOfflineContent(currentLangLocale);
                    }, 30000, currentLangLocale);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "Error returned from ajax, ErrorThrown = " + errorThrown + " Text Status = " + textStatus + " Falling back to offline content");
                    LanguageSelector.NavigateToOfflineContent(UNPContentWrapper.CommonHelpers.GetLangLocale());
                });
            }
        };
        LanguageSelector.NavigateToOfflineContent = function (langLocale) {
            var OfflineFolder;
            var offlineURL;
            OfflineFolder = window.external.GetCampaignContentDir();
            offlineURL = OfflineFolder + UNPContentWrapper.CommonDefines.urlFolderSeparator + langLocale + UNPContentWrapper.CommonDefines.urlFolderSeparator + UNPContentWrapper.CommonDefines.contentFileName;
            if (!window.external.CheckLocalFileExistence(offlineURL)) {
                window.external.CloseWindow(UNPContentWrapper.CloseReason.Error);
            }
            window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "Display Language is: " + langLocale + ", Loading Localized Content From: " + offlineURL);
            window.location.assign(offlineURL);
        };
        LanguageSelector.GetOnlineUXTypeSelectorURL = function () {
            var metadata = UNPContentWrapper.CommonHelpers.GetOfflineMetadataJson();
            if (metadata !== null && metadata !== undefined) {
                return metadata.OnlineUXTypeSelectorURL;
            }
            return null;
        };
        return LanguageSelector;
    })();
    UNPContentWrapper.LanguageSelector = LanguageSelector;
    var OnlineLanguageSelector = (function () {
        function OnlineLanguageSelector() {
        }
        OnlineLanguageSelector.ChooseOnlineContent = function () {
            var LangLocale = UNPContentWrapper.CommonHelpers.GetLangLocale();
            OnlineLanguageSelector.NavigateToOnlineContent(LangLocale);
        };
        OnlineLanguageSelector.NavigateToOnlineContent = function (langLocale) {
            var OnlineURL = OnlineLanguageSelector.GetOnlineContentURLBase() + "/" + langLocale + "/" + OnlineLanguageSelector.GetOnlineContentURLSuffix();
            window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "Attempting to navigate to: " + OnlineURL);
            $.ajax({
                cache: true,
                context: langLocale,
                url: OnlineURL,
                type: "HEAD",
                dataType: "html"
            })
                .done(function (data, textStatus, jqXHR) {
                window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "Online Content found at " + OnlineLanguageSelector.GetOnlineContentURLBase() + "/" + this + "/" + OnlineLanguageSelector.GetOnlineContentURLSuffix() + " with data " + data + " and text status " + textStatus);
                window.external.Navigate(OnlineLanguageSelector.GetOnlineContentURLBase() + "/" + this + "/" + OnlineLanguageSelector.GetOnlineContentURLSuffix());
            })
                .fail(function (jqXHR, textStatus, errorThrown) {
                window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "Error returned from ajax, ErrorThrown = " + errorThrown + " Text Status = " + textStatus + " readyState: " + jqXHR.readyState + " status: " + jqXHR.status + " responseText: " + jqXHR.responseText + " " + jqXHR.status + " " + jqXHR.statusText + " " + jqXHR.response);
                var currentLangLocale = this;
                window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "No online Content found at " + OnlineLanguageSelector.GetOnlineContentURLBase() + "/" + currentLangLocale + "/" + OnlineLanguageSelector.GetOnlineContentURLSuffix() + " need to compare " + currentLangLocale + " with " + UNPContentWrapper.CommonDefines.languageDefault.toUpperCase());
                if (currentLangLocale.toUpperCase() === UNPContentWrapper.CommonDefines.languageDefault.toUpperCase()) {
                    window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "No Content found at Default content location, falling back to offline ");
                    LanguageSelector.NavigateToOfflineContent(UNPContentWrapper.CommonHelpers.CalculateOfflineLangLocaleFallback());
                }
                else {
                    var newLang = UNPContentWrapper.CommonHelpers.GetLanguageFallback(this);
                    OnlineLanguageSelector.NavigateToOnlineContent(newLang);
                }
            });
        };
        OnlineLanguageSelector.GetOnlineContentURLBase = function () {
            var metadata = UNPContentWrapper.CommonHelpers.GetOfflineMetadataJson();
            if (metadata !== null && metadata !== undefined) {
                return metadata.OnlineContentBase;
            }
            return null;
        };
        OnlineLanguageSelector.GetOnlineContentURLSuffix = function () {
            var metadata = UNPContentWrapper.CommonHelpers.GetOfflineMetadataJson();
            if (metadata !== null && metadata !== undefined) {
                return metadata.OnlineContentSuffix;
            }
            return null;
        };
        return OnlineLanguageSelector;
    })();
    UNPContentWrapper.OnlineLanguageSelector = OnlineLanguageSelector;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyTelemetrySchema = (function (_super) {
        __extends(PrivacyTelemetrySchema, _super);
        function PrivacyTelemetrySchema() {
            _super.apply(this, arguments);
        }
        PrivacyTelemetrySchema.SliderDefaults = new UNPContentWrapper.TelemetrySchema(UNPContentWrapper.CriticalTelemetry, "SliderDefaults", "locationSliderPosition", "speechRecognitionSliderPosition", "diagnosticsSliderPosition", "tailoredExperiencesSliderPosition", "relevantAdsSliderPosition");
        PrivacyTelemetrySchema.SettingsChoiceReturnToSlideView = new UNPContentWrapper.TelemetrySchema(UNPContentWrapper.NormalTelemetry, "SettingsChoiceReturnToSlideView", "locationSliderPosition", "speechRecognitionSliderPosition", "diagnosticsSliderPosition", "tailoredExperiencesSliderPosition", "relevantAdsSliderPosition");
        PrivacyTelemetrySchema.SliderChoices = new UNPContentWrapper.TelemetrySchema(UNPContentWrapper.CriticalTelemetry, "SliderChoices", "locationSliderDefaultPosition", "speechRecognitionSliderDefaultPosition", "diagnosticsSliderDefaultPosition", "tailoredExperiencesSliderDefaultPosition", "relevantAdsSliderDefaultPosition", "locationSliderChoice", "speechRecognitionSliderChoice", "diagnosticsSliderChoice", "tailoredExperiencesSliderChoice", "relevantAdsSliderChoice");
        PrivacyTelemetrySchema.UserUnblockCreatorsUpdate = new UNPContentWrapper.TelemetrySchema(UNPContentWrapper.CriticalTelemetry, "UserUnblockCreatorsUpdate", "userSID", "choiceTimestamp");
        PrivacyTelemetrySchema.PrivacyMappingInputs = new UNPContentWrapper.TelemetrySchema(UNPContentWrapper.CriticalTelemetry, "PrivacyMappingInputs", "HKLM_REGKEY_LOCATION_SERVICE_CONFIGURATION_HRESULT", "HKLM_REGKEY_LOCATION_SERVICE_CONFIGURATION_RETVAL", "HKCU_LOCATION_SENSOR_PERMISSIONS_HRESULT", "HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL", "HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_HRESULT", "HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL", "HKCU_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_HRESULT", "HKCU_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL", "HKLM_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_HRESULT", "HKLM_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL", "HKLM_DIAGNOSTICS_DATA_COLLECTION_HRESULT", "HKLM_DIAGNOSTICS_DATA_COLLECTION_RETVAL", "HKCU_DIAGNOSTICS_FLIP_AHEAD_HRESULT", "HKCU_DIAGNOSTICS_FLIP_AHEAD_RETVAL", "HKLM_DIAGNOSTICS_FLIP_AHEAD_HRESULT", "HKLM_DIAGNOSTICS_FLIP_AHEAD_RETVAL", "HKCU_DIAGNOSTICS_TPIC_HRESULT", "HKCU_DIAGNOSTICS_TPIC_RETVAL", "HKLM_DIAGNOSTICS_TPIC_HRESULT", "HKLM_DIAGNOSTICS_TPIC_RETVAL", "HKCU_RELEVANT_ADS_ADVERTISING_INFO_HRESULT", "HKCU_RELEVANT_ADS_ADVERTISING_INFO_RETVAL", "HKLM_RELEVANT_ADS_ADVERTISING_INFO_HRESULT", "HKLM_RELEVANT_ADS_ADVERTISING_INFO_RETVAL");
        return PrivacyTelemetrySchema;
    })(UNPContentWrapper.TelemetrySchema);
    UNPContentWrapper.PrivacyTelemetrySchema = PrivacyTelemetrySchema;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    (function (SlideIDs) {
        SlideIDs[SlideIDs["NoSlide"] = 0] = "NoSlide";
        SlideIDs[SlideIDs["PrivacyDefaultLanding"] = 1] = "PrivacyDefaultLanding";
        SlideIDs[SlideIDs["PrivacyDefaultLandingLastReminder"] = 2] = "PrivacyDefaultLandingLastReminder";
        SlideIDs[SlideIDs["PrivacyDefaultLandingNoReminder"] = 3] = "PrivacyDefaultLandingNoReminder";
        SlideIDs[SlideIDs["PrivacyDefaultLandingTH2"] = 4] = "PrivacyDefaultLandingTH2";
        SlideIDs[SlideIDs["PrivacyDefaultLandingTH2LastReminder"] = 5] = "PrivacyDefaultLandingTH2LastReminder";
        SlideIDs[SlideIDs["PrivacyDefaultLandingTH2NoReminder"] = 6] = "PrivacyDefaultLandingTH2NoReminder";
        SlideIDs[SlideIDs["PrivacySettingsChoice"] = 7] = "PrivacySettingsChoice";
        SlideIDs[SlideIDs["PrivacySettingsConfirmation"] = 8] = "PrivacySettingsConfirmation";
        SlideIDs[SlideIDs["PrivacySettingsConfirmationWithEngagedRestart"] = 9] = "PrivacySettingsConfirmationWithEngagedRestart";
        SlideIDs[SlideIDs["PrivacyReminder"] = 10] = "PrivacyReminder";
        SlideIDs[SlideIDs["PrivacyReminderWithEngagedRestart"] = 11] = "PrivacyReminderWithEngagedRestart";
        SlideIDs[SlideIDs["Error"] = 12] = "Error";
        SlideIDs[SlideIDs["LearnMorePrivacy"] = 13] = "LearnMorePrivacy";
        SlideIDs[SlideIDs["LearnMoreCreatorsUpdate"] = 14] = "LearnMoreCreatorsUpdate";
    })(UNPContentWrapper.SlideIDs || (UNPContentWrapper.SlideIDs = {}));
    var SlideIDs = UNPContentWrapper.SlideIDs;
    ;
    var SlideNames = (function () {
        function SlideNames() {
        }
        SlideNames.NoSlide = "NoSlide";
        SlideNames.PrivacyDefaultLanding = "PrivacyDefaultLanding";
        SlideNames.PrivacyDefailtLandingLastReminder = "PrivacyDefaultLastReminder";
        SlideNames.PrivacyDefailtLandingNoReminder = "PrivacyDefaultNoReminder";
        SlideNames.PrivacyDefaultLandingTH2 = "PrivacyDefaultLandingTH2";
        SlideNames.PrivacyDefailtLandingTH2LastReminder = "PrivacyDefaultTH2LastReminder";
        SlideNames.PrivacyDefailtLandingTH2NoReminder = "PrivacyDefaultTH2NoReminder";
        SlideNames.PrivacySettingsChoice = "PrivacySettingsChoice";
        SlideNames.PrivacySettingsConfirmation = "PrivacySettingsConfirmation";
        SlideNames.PrivacySettingsConfirmationWithEngagedRestart = "PrivacySettingsConfirmationWithEngagedRestart";
        SlideNames.PrivacyReminder = "PrivacyReminder";
        SlideNames.PrivacyReminderWithEngagedRestart = "PrivacyReminderWithEngagedRestart";
        SlideNames.Error = "Error";
        SlideNames.LearnMorePrivacy = "LearnMorePrivacy";
        SlideNames.LearnMoreCreatorsUpdate = "LearnMoreCreatorsUpdate";
        return SlideNames;
    })();
    UNPContentWrapper.SlideNames = SlideNames;
    var InitializationValueNames = (function () {
        function InitializationValueNames() {
        }
        InitializationValueNames.LocationSliderDefault = "LocationSliderValue";
        InitializationValueNames.SpeechRecognitionSliderDefault = "SpeechRecognitionSliderValue";
        InitializationValueNames.DiagnosticsSliderDefault = "DiagnosticsSliderValue";
        InitializationValueNames.TailoredExperiencesSliderDefault = "TailoredExperiencesSliderValue";
        InitializationValueNames.RelevantAdsSliderDefault = "RelevantAdsSliderValue";
        InitializationValueNames.HresultErrorCode = "ErrorCode";
        InitializationValueNames.ABExperimentID = "ExperimentID";
        InitializationValueNames.ABExperimentVariation = "ExperimentVariation";
        return InitializationValueNames;
    })();
    UNPContentWrapper.InitializationValueNames = InitializationValueNames;
    var ClickHandlerNames = (function () {
        function ClickHandlerNames() {
        }
        ClickHandlerNames.BackButtonName = "BackButton";
        ClickHandlerNames.RemindMeLaterButtonName = "RemindMeLaterButton";
        ClickHandlerNames.LearnMoreButtonName = "LearnMoreButton";
        ClickHandlerNames.SaveButtonName = "SaveButton";
        ClickHandlerNames.DoneButtonName = "DoneButton";
        ClickHandlerNames.ReviewSettingsButtonName = "ReviewSettingsButton";
        ClickHandlerNames.CloseButtonName = "CloseButton";
        return ClickHandlerNames;
    })();
    UNPContentWrapper.ClickHandlerNames = ClickHandlerNames;
    var ReturnValueNames = (function () {
        function ReturnValueNames() {
        }
        ReturnValueNames.LocationSliderReturn = "LocationValue";
        ReturnValueNames.SpeechRecognitionSliderReturn = "SpeechRecognitionValue";
        ReturnValueNames.DiagnosticsSliderReturn = "DiagnosticsValue";
        ReturnValueNames.TailoredExperiencesSliderReturn = "TailoredExperiencesValue";
        ReturnValueNames.RelevantAdsSliderReturn = "RelevantAdsValue";
        return ReturnValueNames;
    })();
    UNPContentWrapper.ReturnValueNames = ReturnValueNames;
    var LogMessages = (function () {
        function LogMessages() {
        }
        LogMessages.UXLaunched = "Privacy Javascript host Launched";
        LogMessages.ErrorPageLaunched = "Error Page Launching";
        LogMessages.WindowClosingError = "Window closing due to error";
        LogMessages.WindowClosingNormal = "Window closing due to user action";
        LogMessages.ButtonClickWithoutName = "Button Click Handled, Button Name = ";
        LogMessages.PageDisplayFormat = "Displaying slide: ";
        LogMessages.SliderChoice = " Slider Choice = ";
        LogMessages.SliderPositionStart = " Slider Starting Position = ";
        return LogMessages;
    })();
    UNPContentWrapper.LogMessages = LogMessages;
    var ToastNotificationFileNames = (function () {
        function ToastNotificationFileNames() {
        }
        ToastNotificationFileNames.LandingPageToast = "toastreviewsettings.xml";
        ToastNotificationFileNames.ConfirmationPageToast = "toastbeginupgrade.xml";
        ToastNotificationFileNames.ConfirmationNoEngagedRestartToast = "toastbeginupgradeth2.xml";
        return ToastNotificationFileNames;
    })();
    UNPContentWrapper.ToastNotificationFileNames = ToastNotificationFileNames;
    (function (SliderPosition) {
        SliderPosition[SliderPosition["OFF"] = 0] = "OFF";
        SliderPosition[SliderPosition["ON"] = 1] = "ON";
        SliderPosition[SliderPosition["ERROR"] = 2] = "ERROR";
    })(UNPContentWrapper.SliderPosition || (UNPContentWrapper.SliderPosition = {}));
    var SliderPosition = UNPContentWrapper.SliderPosition;
    var PrivacyExperienceConstants = (function () {
        function PrivacyExperienceConstants() {
        }
        PrivacyExperienceConstants.LandingPageShowsBeforeExperienceChange = 4;
        return PrivacyExperienceConstants;
    })();
    UNPContentWrapper.PrivacyExperienceConstants = PrivacyExperienceConstants;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyRegistryHelpers = (function () {
        function PrivacyRegistryHelpers() {
        }
        PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_LOCATION = "DefaultSliderPosLocation";
        PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_SPEECH = "DefaultSliderPosSpeech";
        PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_DIAGNOSTICS = "DefaultSliderPosDiagnostics";
        PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_TAILOREDEXPERIENCES = "DefaultSliderPosTE";
        PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_RELEVANTADS = "DefaultSliderPosAds";
        PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_LOCATION = "UserChoiceSliderPosLocation";
        PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_SPEECH = "UserChoiceSliderPosSpeech";
        PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_DIAGNOSTICS = "UserChoiceSliderPosDiagnostics";
        PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_TAILOREDEXPERIENCES = "UserChoiceSliderPosTE";
        PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_RELEVANTADS = "UserChoiceSliderPosAds";
        PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_TIMESTAMP = "UserChoiceTimestamp";
        PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_SID = "UPXUserSID";
        PrivacyRegistryHelpers.HKLM_REGKEY_CREATORS_UPDATE_PRIVACY_SETTINGS = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CreatorsUpdatePrivacySettings";
        PrivacyRegistryHelpers.HKLM_REGVALUE_CREATORS_UPDATE_SETTINGS_COMPLETE = "CreatorsUpdateSettingsComplete";
        PrivacyRegistryHelpers.HKLM_REGVALUE_CREATORS_UPDATE_DONE = "AllowCreatorsUpdate";
        PrivacyRegistryHelpers.UNP_REGISTRY_LAST_REMINDER_SHOWN_REGVAL = "LastReminderShowCount";
        return PrivacyRegistryHelpers;
    })();
    UNPContentWrapper.PrivacyRegistryHelpers = PrivacyRegistryHelpers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    function ChooseLandingSlide() {
        var hresult = UNPContentWrapper.CommonHelpers.CheckIfValidWindowSize();
        if (hresult !== UNPContentWrapper.HRESULT.S_OK && hresult !== UNPContentWrapper.HRESULT.E_NOTIMPL) {
            window.external.CloseWindow();
        }
        var LangLocal = UNPContentWrapper.CommonHelpers.GetLangLocale().toUpperCase();
        var landingPageChoice = UNPContentWrapper.SlideIDs.NoSlide;
        var landingSlide;
        window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, UNPContentWrapper.LogMessages.UXLaunched);
        window.external.OnPageLoad();
        var SettingsComplete = window.external.ReadMachineDWORDRegValue(UNPContentWrapper.PrivacyRegistryHelpers.HKLM_REGKEY_CREATORS_UPDATE_PRIVACY_SETTINGS, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_REGVALUE_CREATORS_UPDATE_SETTINGS_COMPLETE);
        var DoneSet = window.external.ReadMachineDWORDRegValue(UNPContentWrapper.PrivacyRegistryHelpers.HKLM_REGKEY_CREATORS_UPDATE_PRIVACY_SETTINGS, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_REGVALUE_CREATORS_UPDATE_DONE);
        var MachineSessionCounter = UNPContentWrapper.RegistryHelpers.IncrementHKLMRegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateRegistryLocation(), UNPContentWrapper.RegistryHelpers.UNP_REGISTRY_LOCALSTATE_SESSION_REGVAL);
        var UserSessionCounter = UNPContentWrapper.RegistryHelpers.IncrementHKCURegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKCUContentLocalStateRegistryLocation(), UNPContentWrapper.RegistryHelpers.UNP_REGISTRY_LOCALSTATE_SESSION_REGVAL);
        if (!UNPContentWrapper.PrivacyHelpers.MachineHasEngagedRestart()) {
            if (SettingsComplete == 1 &&
                (DoneSet === undefined || DoneSet === null || DoneSet !== 1)) {
                landingPageChoice = UNPContentWrapper.SlideIDs.PrivacyReminder;
            }
            else if ((SettingsComplete !== 1) &&
                (DoneSet === undefined || DoneSet === null || DoneSet !== 1)) {
                if (UserSessionCounter <= UNPContentWrapper.PrivacyExperienceConstants.LandingPageShowsBeforeExperienceChange) {
                    landingPageChoice = UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2;
                }
                else {
                    var UserLastReminderShowCount = UNPContentWrapper.RegistryHelpers.IncrementHKCURegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKCUContentLocalStateRegistryLocation(), UNPContentWrapper.PrivacyRegistryHelpers.UNP_REGISTRY_LAST_REMINDER_SHOWN_REGVAL);
                    var MachineLastReminderShowCount = UNPContentWrapper.RegistryHelpers.IncrementHKLMRegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateRegistryLocation(), UNPContentWrapper.PrivacyRegistryHelpers.UNP_REGISTRY_LAST_REMINDER_SHOWN_REGVAL);
                    if (UserLastReminderShowCount === 1) {
                        landingPageChoice = UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2LastReminder;
                    }
                    else {
                        landingPageChoice = UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2NoReminder;
                    }
                }
            }
            else {
                landingPageChoice = UNPContentWrapper.SlideIDs.Error;
            }
        }
        else {
            if (SettingsComplete === undefined || SettingsComplete === null || SettingsComplete !== 1 ||
                DoneSet === undefined || DoneSet === null || DoneSet !== 1) {
                if (UserSessionCounter <= UNPContentWrapper.PrivacyExperienceConstants.LandingPageShowsBeforeExperienceChange) {
                    landingPageChoice = UNPContentWrapper.SlideIDs.PrivacyDefaultLanding;
                }
                else {
                    var UserLastReminderShowCount = UNPContentWrapper.RegistryHelpers.IncrementHKCURegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKCUContentLocalStateRegistryLocation(), UNPContentWrapper.PrivacyRegistryHelpers.UNP_REGISTRY_LAST_REMINDER_SHOWN_REGVAL);
                    var MachineLastReminderShowCount = UNPContentWrapper.RegistryHelpers.IncrementHKLMRegistryCounter(UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateRegistryLocation(), UNPContentWrapper.PrivacyRegistryHelpers.UNP_REGISTRY_LAST_REMINDER_SHOWN_REGVAL);
                    if (UserLastReminderShowCount === 1) {
                        landingPageChoice = UNPContentWrapper.SlideIDs.PrivacyDefaultLandingLastReminder;
                    }
                    else {
                        landingPageChoice = UNPContentWrapper.SlideIDs.PrivacyDefaultLandingNoReminder;
                    }
                }
            }
            else {
                landingPageChoice = UNPContentWrapper.SlideIDs.Error;
            }
        }
        landingSlide = UNPContentWrapper.PrivacyHelpers.GetViewModelFromSlideID(landingPageChoice, new Array(), UNPContentWrapper.SlideIDs.NoSlide);
        if (landingSlide instanceof UNPContentWrapper.ErrorSlideViewModel) {
            landingSlide.SetErrorCode(UNPContentWrapper.HRESULT.E_ILLEGAL_STATE_CHANGE);
        }
        UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.TelemetrySchema.LandingPageChoice, MachineSessionCounter.toString(), UserSessionCounter.toString());
        return landingSlide;
    }
    UNPContentWrapper.ChooseLandingSlide = ChooseLandingSlide;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyHelpers = (function () {
        function PrivacyHelpers() {
        }
        PrivacyHelpers.GetViewModelFromSlideID = function (SlideChoice, SlideViewHistory, PreviousSlideId) {
            var newSlide;
            newSlide = null;
            switch (SlideChoice) {
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLanding:
                    newSlide = new UNPContentWrapper.PrivacyLandingSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingLastReminder:
                    newSlide = new UNPContentWrapper.PrivacyLandingLastReminderSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingNoReminder:
                    newSlide = new UNPContentWrapper.PrivacyLandingNoReminderSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2:
                    newSlide = new UNPContentWrapper.PrivacyLandingTH2SlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2LastReminder:
                    newSlide = new UNPContentWrapper.PrivacyLandingTH2LastReminderSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2NoReminder:
                    newSlide = new UNPContentWrapper.PrivacyLandingTH2NoReminderSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacySettingsChoice:
                    newSlide = new UNPContentWrapper.PrivacySettingsChoiceSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacySettingsConfirmation:
                    newSlide = new UNPContentWrapper.PrivacySettingsConfirmationSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacySettingsConfirmationWithEngagedRestart:
                    newSlide = new UNPContentWrapper.PrivacySettingsConfirmationWithEngagedRestartSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacyReminder:
                    newSlide = new UNPContentWrapper.PrivacyReminderSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.PrivacyReminderWithEngagedRestart:
                    newSlide = new UNPContentWrapper.PrivacyReminderWithEngagedRestartSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.Error:
                    newSlide = new UNPContentWrapper.ErrorSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.LearnMorePrivacy:
                    newSlide = new UNPContentWrapper.LearnMorePrivacySlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
                case UNPContentWrapper.SlideIDs.LearnMoreCreatorsUpdate:
                    newSlide = new UNPContentWrapper.LearnMoreCreatorsUpdateSlideViewModel(SlideViewHistory, PreviousSlideId);
                    break;
            }
            return newSlide;
        };
        PrivacyHelpers.GetSlideNameFromSlide = function (SlideChoice) {
            switch (SlideChoice) {
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLanding:
                    return UNPContentWrapper.SlideNames.PrivacyDefaultLanding;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingLastReminder:
                    return UNPContentWrapper.SlideNames.PrivacyDefailtLandingLastReminder;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingNoReminder:
                    return UNPContentWrapper.SlideNames.PrivacyDefailtLandingNoReminder;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2:
                    return UNPContentWrapper.SlideNames.PrivacyDefaultLandingTH2;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2LastReminder:
                    return UNPContentWrapper.SlideNames.PrivacyDefailtLandingTH2LastReminder;
                case UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2NoReminder:
                    return UNPContentWrapper.SlideNames.PrivacyDefailtLandingTH2NoReminder;
                case UNPContentWrapper.SlideIDs.PrivacySettingsChoice:
                    return UNPContentWrapper.SlideNames.PrivacySettingsChoice;
                case UNPContentWrapper.SlideIDs.PrivacySettingsConfirmation:
                    return UNPContentWrapper.SlideNames.PrivacySettingsConfirmation;
                case UNPContentWrapper.SlideIDs.PrivacySettingsConfirmationWithEngagedRestart:
                    return UNPContentWrapper.SlideNames.PrivacySettingsConfirmationWithEngagedRestart;
                case UNPContentWrapper.SlideIDs.PrivacyReminder:
                    return UNPContentWrapper.SlideNames.PrivacyReminder;
                case UNPContentWrapper.SlideIDs.PrivacyReminderWithEngagedRestart:
                    return UNPContentWrapper.SlideNames.PrivacyReminderWithEngagedRestart;
                case UNPContentWrapper.SlideIDs.Error:
                    return UNPContentWrapper.SlideNames.Error;
                case UNPContentWrapper.SlideIDs.LearnMorePrivacy:
                    return UNPContentWrapper.SlideNames.LearnMorePrivacy;
                case UNPContentWrapper.SlideIDs.LearnMoreCreatorsUpdate:
                    return UNPContentWrapper.SlideNames.LearnMoreCreatorsUpdate;
                case UNPContentWrapper.SlideIDs.NoSlide:
                    return UNPContentWrapper.SlideNames.NoSlide;
                default:
                    return UNPContentWrapper.SlideNames.NoSlide;
            }
        };
        PrivacyHelpers.MachineHasEngagedRestart = function () {
            return UNPContentWrapper.CommonHelpers.IsOSVersionWithinRange(UNPContentWrapper.OSVersion.RS1_MIN_VERSION, UNPContentWrapper.OSVersion.RS1_MAX_VERSION);
        };
        PrivacyHelpers.NumberToSliderPosition = function (num) {
            switch (num) {
                case 0:
                    return UNPContentWrapper.SliderPosition.OFF;
                case 1:
                    return UNPContentWrapper.SliderPosition.ON;
                default:
                    return UNPContentWrapper.SliderPosition.ERROR;
            }
        };
        PrivacyHelpers.SliderPositionToNumber = function (slider) {
            switch (slider) {
                case UNPContentWrapper.SliderPosition.OFF:
                    return 0;
                case UNPContentWrapper.SliderPosition.ON:
                    return 1;
                default:
                    return 2;
            }
        };
        PrivacyHelpers.SliderPositionToString = function (slider) {
            switch (slider) {
                case UNPContentWrapper.SliderPosition.OFF:
                    return "Off";
                case UNPContentWrapper.SliderPosition.ON:
                    return "On";
                default:
                    return "Error";
            }
        };
        PrivacyHelpers.NumberSliderPositionToString = function (slider) {
            return PrivacyHelpers.SliderPositionToString(PrivacyHelpers.NumberToSliderPosition(slider));
        };
        PrivacyHelpers.SendTelemetryOnSliderInputs = function () {
            var STR_HKLM_REGKEY_LOCATION_PRIVACY_SETTINGS_SERVICE_CONFIGURATION = "SYSTEM\\CurrentControlSet\\Services\\lfsvc\\Service\\Configuration";
            var STR_HKLM_REGVALUE_LOCATION_PRIVACY_SETTINGS_SERVICE_CONFIGURATION_STATUS = "Status";
            var STR_HKCU_REGKEY_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Sensor\\Permissions\\{BFA794E4-F964-4FDB-90F6-51056BFE4B44}";
            var STR_HKLM_REGKEY_LOCATION_PRIVACY_SETTINGS_SENSOR_OVERRIDES = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Sensor\\Overrides\\{BFA794E4-F964-4FDB-90F6-51056BFE4B44}";
            var STR_HKCU_HKLM_REGVALUE_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS_AND_OVERRIDES_SENSOR_PERMISION_STATE = "SensorPermissionState";
            var STR_HKCU_HKLM_REGKEY_SPEECH_RECOGNITION_PRIVACY_SETTINGS_PERSONALIZATION_SETTINGS = "SOFTWARE\\Microsoft\\Personalization\\Settings";
            var STR_HKCU_HKLM_REGVALUE_SPEECH_RECOGNITION_PRIVACY_SETTINGS_PERSONALIZATION_SETTINGS_ACCEPTED_PRIVACY_POLICY = "AcceptedPrivacyPolicy";
            var STR_HKLM_REGKEY_DIAGNOSTICS_PRIVACY_SETTINGS_DATA_COLLECTION = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\DataCollection";
            var STR_HKLM_REGVALUE_DIAGNOSTICS_PRIVACY_SETTINGS_DATA_COLLECTION_ALLOW_TELEMETRY = "AllowTelemetry";
            var STR_HKCU_HKLM_REGKEY_DIAGNOSTICS_PRIVACY_SETTINGS_FLIP_AHEAD = "SOFTWARE\\Microsoft\\Internet Explorer\\FlipAhead";
            var STR_HKCU_HKLM_REGVALUE_DIAGNOSTICS_PRIVACY_SETTINGS_FLIP_AHEAD_FPENABLED = "FPEnabled";
            var STR_HKCU_HKLM_REGKEY_DIAGNOSTICS_PRIVACY_SETTINGS_TPIC = "SOFTWARE\\Microsoft\\Input\\TIPC";
            var STR_HKCU_HKLM_REGVALUE_DIAGNOSTICS_PRIVACY_SETTINGS_TPIC_ENABLED = "Enabled";
            var STR_HKCU_HKLM_REGKEY_RELEVANT_ADS_PRIVACY_SETTINGS_ADVERTISING_INFO = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AdvertisingInfo";
            var STR_HKCU_HKLM_REGVALUE_RELEVANT_ADS_PRIVACY_SETTINGS_ADVERTISING_INFO_ENABLED = "Enabled";
            var HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL = window.external.ReadUserDWORDRegValue(STR_HKCU_REGKEY_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS, STR_HKCU_HKLM_REGVALUE_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS_AND_OVERRIDES_SENSOR_PERMISION_STATE);
            var HKCU_LOCATION_SENSOR_PERMISSIONS_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL);
            var HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL = window.external.ReadMachineDWORDRegValue(STR_HKLM_REGKEY_LOCATION_PRIVACY_SETTINGS_SENSOR_OVERRIDES, STR_HKCU_HKLM_REGVALUE_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS_AND_OVERRIDES_SENSOR_PERMISION_STATE);
            var HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL);
            var HKCU_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL = window.external.ReadUserDWORDRegValue(STR_HKCU_HKLM_REGKEY_SPEECH_RECOGNITION_PRIVACY_SETTINGS_PERSONALIZATION_SETTINGS, STR_HKCU_HKLM_REGVALUE_SPEECH_RECOGNITION_PRIVACY_SETTINGS_PERSONALIZATION_SETTINGS_ACCEPTED_PRIVACY_POLICY);
            var HKCU_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKCU_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL);
            var HKLM_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL = window.external.ReadMachineDWORDRegValue(STR_HKCU_HKLM_REGKEY_SPEECH_RECOGNITION_PRIVACY_SETTINGS_PERSONALIZATION_SETTINGS, STR_HKCU_HKLM_REGVALUE_SPEECH_RECOGNITION_PRIVACY_SETTINGS_PERSONALIZATION_SETTINGS_ACCEPTED_PRIVACY_POLICY);
            var HKLM_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKLM_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL);
            var HKLM_DIAGNOSTICS_DATA_COLLECTION_RETVAL = window.external.ReadMachineDWORDRegValue(STR_HKLM_REGKEY_DIAGNOSTICS_PRIVACY_SETTINGS_DATA_COLLECTION, STR_HKLM_REGVALUE_DIAGNOSTICS_PRIVACY_SETTINGS_DATA_COLLECTION_ALLOW_TELEMETRY);
            var HKLM_DIAGNOSTICS_DATA_COLLECTION_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKLM_DIAGNOSTICS_DATA_COLLECTION_RETVAL);
            var HKCU_DIAGNOSTICS_FLIP_AHEAD_RETVAL = window.external.ReadUserDWORDRegValue(STR_HKCU_HKLM_REGKEY_DIAGNOSTICS_PRIVACY_SETTINGS_FLIP_AHEAD, STR_HKCU_HKLM_REGVALUE_DIAGNOSTICS_PRIVACY_SETTINGS_FLIP_AHEAD_FPENABLED);
            var HKCU_DIAGNOSTICS_FLIP_AHEAD_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKCU_DIAGNOSTICS_FLIP_AHEAD_RETVAL);
            var HKLM_DIAGNOSTICS_FLIP_AHEAD_RETVAL = window.external.ReadMachineDWORDRegValue(STR_HKCU_HKLM_REGKEY_DIAGNOSTICS_PRIVACY_SETTINGS_FLIP_AHEAD, STR_HKCU_HKLM_REGVALUE_DIAGNOSTICS_PRIVACY_SETTINGS_FLIP_AHEAD_FPENABLED);
            var HKLM_DIAGNOSTICS_FLIP_AHEAD_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKLM_DIAGNOSTICS_FLIP_AHEAD_RETVAL);
            var HKCU_DIAGNOSTICS_TPIC_RETVAL = window.external.ReadUserDWORDRegValue(STR_HKCU_HKLM_REGKEY_DIAGNOSTICS_PRIVACY_SETTINGS_TPIC, STR_HKCU_HKLM_REGVALUE_DIAGNOSTICS_PRIVACY_SETTINGS_TPIC_ENABLED);
            var HKCU_DIAGNOSTICS_TPIC_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKCU_DIAGNOSTICS_TPIC_RETVAL);
            var HKLM_DIAGNOSTICS_TPIC_RETVAL = window.external.ReadMachineDWORDRegValue(STR_HKCU_HKLM_REGKEY_DIAGNOSTICS_PRIVACY_SETTINGS_TPIC, STR_HKCU_HKLM_REGVALUE_DIAGNOSTICS_PRIVACY_SETTINGS_TPIC_ENABLED);
            var HKLM_DIAGNOSTICS_TPIC_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKLM_DIAGNOSTICS_TPIC_RETVAL);
            var HKCU_RELEVANT_ADS_ADVERTISING_INFO_RETVAL = window.external.ReadUserDWORDRegValue(STR_HKCU_HKLM_REGKEY_RELEVANT_ADS_PRIVACY_SETTINGS_ADVERTISING_INFO, STR_HKCU_HKLM_REGVALUE_RELEVANT_ADS_PRIVACY_SETTINGS_ADVERTISING_INFO_ENABLED);
            var HKCU_RELEVANT_ADS_ADVERTISING_INFO_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKCU_RELEVANT_ADS_ADVERTISING_INFO_RETVAL);
            var HKLM_RELEVANT_ADS_ADVERTISING_INFO_RETVAL = window.external.ReadMachineDWORDRegValue(STR_HKCU_HKLM_REGKEY_RELEVANT_ADS_PRIVACY_SETTINGS_ADVERTISING_INFO, STR_HKCU_HKLM_REGVALUE_RELEVANT_ADS_PRIVACY_SETTINGS_ADVERTISING_INFO_ENABLED);
            var HKLM_RELEVANT_ADS_ADVERTISING_INFO_HRESULT = UNPContentWrapper.RegistryHelpers.GetHRESULTFromRegRead(HKLM_RELEVANT_ADS_ADVERTISING_INFO_RETVAL);
            UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.PrivacyTelemetrySchema.PrivacyMappingInputs, UNPContentWrapper.HRESULT.E_FAIL.toString(), "ERROR", HKCU_LOCATION_SENSOR_PERMISSIONS_HRESULT.toString(), HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL === null || HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL === undefined ? "ERROR" : HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL.toString(), HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_HRESULT.toString(), HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL === null || HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL === undefined ? "ERROR" : HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL.toString(), HKCU_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_HRESULT.toString(), HKCU_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL === null || HKCU_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL === undefined ? "ERROR" : HKCU_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL.toString(), HKLM_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_HRESULT.toString(), HKLM_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL === null || HKLM_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL === undefined ? "ERROR" : HKLM_SPEECH_RECOGNITION_SETTINGS_PERSONALIZATION_RETVAL.toString(), HKLM_DIAGNOSTICS_DATA_COLLECTION_HRESULT.toString(), HKLM_DIAGNOSTICS_DATA_COLLECTION_RETVAL === null || HKLM_DIAGNOSTICS_DATA_COLLECTION_RETVAL === undefined ? "ERROR" : HKLM_DIAGNOSTICS_DATA_COLLECTION_RETVAL.toString(), HKCU_DIAGNOSTICS_FLIP_AHEAD_HRESULT.toString(), HKCU_DIAGNOSTICS_FLIP_AHEAD_RETVAL === null || HKCU_DIAGNOSTICS_FLIP_AHEAD_RETVAL === undefined ? "ERROR" : HKCU_DIAGNOSTICS_FLIP_AHEAD_RETVAL.toString(), HKLM_DIAGNOSTICS_FLIP_AHEAD_HRESULT.toString(), HKLM_DIAGNOSTICS_FLIP_AHEAD_RETVAL === null || HKLM_DIAGNOSTICS_FLIP_AHEAD_RETVAL === undefined ? "ERROR" : HKLM_DIAGNOSTICS_FLIP_AHEAD_RETVAL.toString(), HKCU_DIAGNOSTICS_TPIC_HRESULT.toString(), HKCU_DIAGNOSTICS_TPIC_RETVAL === null || HKCU_DIAGNOSTICS_TPIC_RETVAL === undefined ? "ERROR" : HKCU_DIAGNOSTICS_TPIC_RETVAL.toString(), HKLM_DIAGNOSTICS_TPIC_HRESULT.toString(), HKLM_DIAGNOSTICS_TPIC_RETVAL === null || HKLM_DIAGNOSTICS_TPIC_RETVAL === undefined ? "ERROR" : HKLM_DIAGNOSTICS_TPIC_RETVAL.toString(), HKCU_RELEVANT_ADS_ADVERTISING_INFO_HRESULT.toString(), HKCU_RELEVANT_ADS_ADVERTISING_INFO_RETVAL === null || HKCU_RELEVANT_ADS_ADVERTISING_INFO_RETVAL === undefined ? "ERROR" : HKCU_RELEVANT_ADS_ADVERTISING_INFO_RETVAL.toString(), HKLM_RELEVANT_ADS_ADVERTISING_INFO_HRESULT.toString(), HKLM_RELEVANT_ADS_ADVERTISING_INFO_RETVAL === null || HKLM_RELEVANT_ADS_ADVERTISING_INFO_RETVAL === undefined ? "ERROR" : HKLM_RELEVANT_ADS_ADVERTISING_INFO_RETVAL.toString());
        };
        PrivacyHelpers.GetLocationSliderDefault = function () {
            var STR_HKCU_REGKEY_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Sensor\\Permissions\\{BFA794E4-F964-4FDB-90F6-51056BFE4B44}";
            var STR_HKLM_REGKEY_LOCATION_PRIVACY_SETTINGS_SENSOR_OVERRIDES = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Sensor\\Overrides\\{BFA794E4-F964-4FDB-90F6-51056BFE4B44}";
            var STR_HKCU_HKLM_REGVALUE_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS_AND_OVERRIDES_SENSOR_PERMISION_STATE = "SensorPermissionState";
            var STR_HKLM_REGKEY_LOCATION_MAPPED = "SOFTWARE\\Microsoft\\UNP\\Detector\\{91be532c-f9f1-406a-9858-43697c6f437a}\\State";
            var STR_HKLM_REGVAL_LOCATION_MAPPED = "HklmConfigurationStatus";
            var HKLM_LOCATION_MAPPED_MASTER_SWITCH_RETVAL = window.external.ReadMachineDWORDRegValue(STR_HKLM_REGKEY_LOCATION_MAPPED, STR_HKLM_REGVAL_LOCATION_MAPPED);
            var HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL = window.external.ReadUserDWORDRegValue(STR_HKCU_REGKEY_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS, STR_HKCU_HKLM_REGVALUE_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS_AND_OVERRIDES_SENSOR_PERMISION_STATE);
            var HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL = window.external.ReadMachineDWORDRegValue(STR_HKLM_REGKEY_LOCATION_PRIVACY_SETTINGS_SENSOR_OVERRIDES, STR_HKCU_HKLM_REGVALUE_LOCATION_PRIVACY_SETTINGS_SENSOR_PERMISSIONS_AND_OVERRIDES_SENSOR_PERMISION_STATE);
            if (HKLM_LOCATION_MAPPED_MASTER_SWITCH_RETVAL === null || HKLM_LOCATION_MAPPED_MASTER_SWITCH_RETVAL === undefined || HKLM_LOCATION_MAPPED_MASTER_SWITCH_RETVAL === 2) {
                return PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.SliderPosition.OFF);
            }
            else if (HKLM_LOCATION_MAPPED_MASTER_SWITCH_RETVAL === 0) {
                return PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.SliderPosition.OFF);
            }
            else {
                if (HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL === null || HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL === undefined) {
                    if (HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL === null || HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL === undefined) {
                        return PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.SliderPosition.OFF);
                    }
                    else if (HKLM_LOCATION_SENSOR_PERMISSIONS_OVERRIDE_RETVAL === 0) {
                        return PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.SliderPosition.OFF);
                    }
                    else {
                        return PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.SliderPosition.ON);
                    }
                }
                else if (HKCU_LOCATION_SENSOR_PERMISSIONS_RETVAL === 0) {
                    return PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.SliderPosition.OFF);
                }
                else {
                    return PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.SliderPosition.ON);
                }
            }
        };
        return PrivacyHelpers;
    })();
    UNPContentWrapper.PrivacyHelpers = PrivacyHelpers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyClickHandlerBase = (function (_super) {
        __extends(PrivacyClickHandlerBase, _super);
        function PrivacyClickHandlerBase(CurrentViewModel) {
            var _this = this;
            _super.call(this, CurrentViewModel);
            this.goToErrorPage = function (SlideHistoryArray, CurrentSlideId, HResult) {
                window.external.LogError(HResult, UNPContentWrapper.LogMessages.ErrorPageLaunched);
                var nextSlide = new UNPContentWrapper.ErrorSlideViewModel(SlideHistoryArray, CurrentSlideId);
                nextSlide.SetErrorCode(HResult);
                return nextSlide;
            };
            this.tryCloseWindow = function (SlideHistoryArray, CurrentSlideId, isError) {
                if (isError === void 0) { isError = false; }
                if (isError) {
                    window.external.LogError(UNPContentWrapper.HRESULT.S_OK, UNPContentWrapper.LogMessages.WindowClosingError);
                }
                else {
                    window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, UNPContentWrapper.LogMessages.WindowClosingNormal);
                }
                var MachineSessionCounter = window.external.ReadMachineQWORDRegValue(UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateRegistryLocation(), UNPContentWrapper.RegistryHelpers.UNP_REGISTRY_LOCALSTATE_SESSION_REGVAL);
                var UserSessionCounter = window.external.ReadUserQWORDRegValue(UNPContentWrapper.RegistryHelpers.GetHKCUContentLocalStateRegistryLocation(), UNPContentWrapper.RegistryHelpers.UNP_REGISTRY_LOCALSTATE_SESSION_REGVAL);
                UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.TelemetrySchema.SessionHistory, UNPContentWrapper.History.GetHistoryString(), MachineSessionCounter.toString(), UserSessionCounter.toString());
                window.external.CloseWindow();
                var lastError = window.external.GetLastJSError();
                if (lastError != UNPContentWrapper.HRESULT.S_OK) {
                    return _this.goToErrorPage(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId(), lastError);
                }
                return null;
            };
            this.OnBackButtonClick = function () {
                var newSlideChoice = _this.CurrentView.GetLastSlideViewed();
                var newSlideViewHistory = _this.CurrentView.GetSlideHistoryArray();
                newSlideViewHistory.pop();
                return UNPContentWrapper.PrivacyHelpers.GetViewModelFromSlideID(newSlideChoice, newSlideViewHistory, UNPContentWrapper.SlideIDs.NoSlide);
            };
            this.OnRemindMeLater = function () {
                var CurrentSlideID = _this.CurrentView.GetSlideId();
                if (CurrentSlideID === UNPContentWrapper.SlideIDs.PrivacyDefaultLanding ||
                    CurrentSlideID === UNPContentWrapper.SlideIDs.PrivacyDefaultLandingLastReminder ||
                    CurrentSlideID === UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2 ||
                    CurrentSlideID === UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2LastReminder) {
                    var SettingsComplete = window.external.ReadMachineDWORDRegValue(UNPContentWrapper.PrivacyRegistryHelpers.HKLM_REGKEY_CREATORS_UPDATE_PRIVACY_SETTINGS, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_REGVALUE_CREATORS_UPDATE_SETTINGS_COMPLETE);
                    if (SettingsComplete !== undefined && SettingsComplete !== null && SettingsComplete === 1) {
                        window.external.SetSettingSliderClear();
                    }
                    var toast = window.external.GetContentFileAsString(UNPContentWrapper.CommonHelpers.GetPathForFile(UNPContentWrapper.CommonHelpers.IsUserOnline(), true, UNPContentWrapper.ToastNotificationFileNames.LandingPageToast));
                    if (toast !== undefined && toast !== null) {
                        window.external.ShowActionCenterToastNotification(toast);
                    }
                }
                else if (CurrentSlideID === UNPContentWrapper.SlideIDs.PrivacyReminder ||
                    CurrentSlideID === UNPContentWrapper.SlideIDs.PrivacySettingsConfirmation) {
                    var toast = window.external.GetContentFileAsString(UNPContentWrapper.CommonHelpers.GetPathForFile(UNPContentWrapper.CommonHelpers.IsUserOnline(), true, UNPContentWrapper.ToastNotificationFileNames.ConfirmationNoEngagedRestartToast));
                    if (toast !== undefined && toast !== null) {
                        window.external.ShowActionCenterToastNotification(toast);
                    }
                }
                else if (CurrentSlideID === UNPContentWrapper.SlideIDs.PrivacySettingsConfirmationWithEngagedRestart ||
                    CurrentSlideID === UNPContentWrapper.SlideIDs.PrivacyReminderWithEngagedRestart) {
                    var toast = window.external.GetContentFileAsString(UNPContentWrapper.CommonHelpers.GetPathForFile(UNPContentWrapper.CommonHelpers.IsUserOnline(), true, UNPContentWrapper.ToastNotificationFileNames.ConfirmationPageToast));
                    if (toast !== undefined && toast !== null) {
                        window.external.ShowActionCenterToastNotification(toast);
                    }
                }
                return _this.tryCloseWindow(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId());
            };
        }
        return PrivacyClickHandlerBase;
    })(UNPContentWrapper.ClickHandlersBase);
    UNPContentWrapper.PrivacyClickHandlerBase = PrivacyClickHandlerBase;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyLandingClickHandlers = (function (_super) {
        __extends(PrivacyLandingClickHandlers, _super);
        function PrivacyLandingClickHandlers(CurrentViewModel) {
            var _this = this;
            _super.call(this, CurrentViewModel);
            this.OnLearnMoreClick = function () {
                return new UNPContentWrapper.LearnMoreCreatorsUpdateSlideViewModel(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId());
            };
            this.OnReviewSettingsClick = function () {
                return new UNPContentWrapper.PrivacySettingsChoiceSlideViewModel(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId());
            };
            this.GetClickHandlers = function () {
                var clickHandlerDictionary;
                clickHandlerDictionary = new UNPContentWrapper.Dictionary();
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.RemindMeLaterButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.RemindMeLaterButtonName, _this.OnRemindMeLater, _this.CurrentView.GetSlideId()); });
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.LearnMoreButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.LearnMoreButtonName, _this.OnLearnMoreClick, _this.CurrentView.GetSlideId()); });
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.ReviewSettingsButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.ReviewSettingsButtonName, _this.OnReviewSettingsClick, _this.CurrentView.GetSlideId()); });
                return clickHandlerDictionary;
            };
        }
        return PrivacyLandingClickHandlers;
    })(UNPContentWrapper.PrivacyClickHandlerBase);
    UNPContentWrapper.PrivacyLandingClickHandlers = PrivacyLandingClickHandlers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var ErrorClickHandlers = (function (_super) {
        __extends(ErrorClickHandlers, _super);
        function ErrorClickHandlers(CurrentViewModel) {
            var _this = this;
            _super.call(this, CurrentViewModel);
            this.OnCloseClick = function () {
                return _this.tryCloseWindow(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId(), true);
            };
            this.GetClickHandlers = function () {
                var clickHandlerDictionary;
                clickHandlerDictionary = new UNPContentWrapper.Dictionary();
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.CloseButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.CloseButtonName, _this.OnCloseClick, _this.CurrentView.GetSlideId()); });
                return clickHandlerDictionary;
            };
        }
        return ErrorClickHandlers;
    })(UNPContentWrapper.PrivacyClickHandlerBase);
    UNPContentWrapper.ErrorClickHandlers = ErrorClickHandlers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var LearnMoreClickHandlers = (function (_super) {
        __extends(LearnMoreClickHandlers, _super);
        function LearnMoreClickHandlers(CurrentViewModel) {
            var _this = this;
            _super.call(this, CurrentViewModel);
            this.GetClickHandlers = function () {
                var clickHandlerDictionary;
                clickHandlerDictionary = new UNPContentWrapper.Dictionary();
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.BackButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.BackButtonName, _this.OnBackButtonClick, _this.CurrentView.GetSlideId()); });
                return clickHandlerDictionary;
            };
        }
        return LearnMoreClickHandlers;
    })(UNPContentWrapper.PrivacyClickHandlerBase);
    UNPContentWrapper.LearnMoreClickHandlers = LearnMoreClickHandlers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var ReminderClickHandlers = (function (_super) {
        __extends(ReminderClickHandlers, _super);
        function ReminderClickHandlers(CurrentViewModel) {
            var _this = this;
            _super.call(this, CurrentViewModel);
            this.OnDoneClick = function () {
                window.external.SetSettingSliderDone();
                var lastError = window.external.GetLastJSError();
                if (lastError != UNPContentWrapper.HRESULT.S_OK) {
                    return _this.goToErrorPage(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId(), lastError);
                }
                window.external.LaunchFeebackUX();
                return _this.tryCloseWindow(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId());
            };
            this.OnLearnMoreClick = function () {
                return new UNPContentWrapper.LearnMoreCreatorsUpdateSlideViewModel(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId());
            };
            this.GetClickHandlers = function () {
                var clickHandlerDictionary;
                clickHandlerDictionary = new UNPContentWrapper.Dictionary();
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.RemindMeLaterButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.RemindMeLaterButtonName, _this.OnRemindMeLater, _this.CurrentView.GetSlideId()); });
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.DoneButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.DoneButtonName, _this.OnDoneClick, _this.CurrentView.GetSlideId()); });
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.LearnMoreButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.LearnMoreButtonName, _this.OnLearnMoreClick, _this.CurrentView.GetSlideId()); });
                return clickHandlerDictionary;
            };
        }
        return ReminderClickHandlers;
    })(UNPContentWrapper.PrivacyClickHandlerBase);
    UNPContentWrapper.ReminderClickHandlers = ReminderClickHandlers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var SettingsChoiceClickHandlers = (function (_super) {
        __extends(SettingsChoiceClickHandlers, _super);
        function SettingsChoiceClickHandlers(CurrentViewModel) {
            var _this = this;
            _super.call(this, CurrentViewModel);
            this.OnLearnMoreClick = function () {
                return new UNPContentWrapper.LearnMorePrivacySlideViewModel(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId());
            };
            this.OnSaveButtonClick = function () {
                var returnValues = _this.CurrentView.GetSlideReturnValues();
                if (returnValues === undefined || returnValues === null) {
                    return _this.goToErrorPage(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId(), UNPContentWrapper.HRESULT.E_INVALIDARG);
                }
                var SliderLocationPosition;
                var SliderSpeechRecognitionPosition;
                var SliderDiagnosticsPosition;
                var SliderTailoredExperiencesPosition;
                var SliderRelevantAdsPosition;
                if (returnValues.ContainsKey(UNPContentWrapper.ReturnValueNames.LocationSliderReturn)) {
                    SliderLocationPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.LocationSliderReturn);
                }
                if (returnValues.ContainsKey(UNPContentWrapper.ReturnValueNames.SpeechRecognitionSliderReturn)) {
                    SliderSpeechRecognitionPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.SpeechRecognitionSliderReturn);
                }
                if (returnValues.ContainsKey(UNPContentWrapper.ReturnValueNames.DiagnosticsSliderReturn)) {
                    SliderDiagnosticsPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.DiagnosticsSliderReturn);
                }
                if (returnValues.ContainsKey(UNPContentWrapper.ReturnValueNames.TailoredExperiencesSliderReturn)) {
                    SliderTailoredExperiencesPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.TailoredExperiencesSliderReturn);
                }
                if (returnValues.ContainsKey(UNPContentWrapper.ReturnValueNames.RelevantAdsSliderReturn)) {
                    SliderRelevantAdsPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.RelevantAdsSliderReturn);
                }
                if (undefined === SliderLocationPosition || null === SliderLocationPosition || UNPContentWrapper.SliderPosition.ERROR === SliderLocationPosition ||
                    undefined === SliderSpeechRecognitionPosition || null === SliderSpeechRecognitionPosition || UNPContentWrapper.SliderPosition.ERROR === SliderSpeechRecognitionPosition ||
                    undefined === SliderDiagnosticsPosition || null === SliderDiagnosticsPosition || UNPContentWrapper.SliderPosition.ERROR === SliderDiagnosticsPosition ||
                    undefined === SliderTailoredExperiencesPosition || null === SliderTailoredExperiencesPosition || UNPContentWrapper.SliderPosition.ERROR === SliderTailoredExperiencesPosition ||
                    undefined === SliderRelevantAdsPosition || null === SliderRelevantAdsPosition || UNPContentWrapper.SliderPosition.ERROR === SliderRelevantAdsPosition) {
                    return _this.goToErrorPage(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId(), UNPContentWrapper.HRESULT.E_INVALIDARG);
                }
                var numLocationPosition = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(SliderLocationPosition);
                var numSpeechRecognitionPosition = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(SliderSpeechRecognitionPosition);
                var numDiagnosticsPosition = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(SliderDiagnosticsPosition);
                var numTailoredExperiencesPosition = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(SliderTailoredExperiencesPosition);
                var numRelevantAdsPosition = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(SliderRelevantAdsPosition);
                var localStateRegKey = UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateRegistryLocation();
                if (localStateRegKey !== null && localStateRegKey !== undefined) {
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_LOCATION, numLocationPosition);
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_SPEECH, numSpeechRecognitionPosition);
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_DIAGNOSTICS, numDiagnosticsPosition);
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_TAILOREDEXPERIENCES, numTailoredExperiencesPosition);
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_POSITION_RELEVANTADS, numRelevantAdsPosition);
                    var userSID = window.external.GetCurrentUserSID();
                    if (userSID !== undefined && userSID !== null) {
                        window.external.WriteMachineStringRegValue(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_SID, userSID);
                    }
                    var timestamp = Math.floor(Date.now() / 1000);
                    UNPContentWrapper.RegistryHelpers.WriteMachineQWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_CHOICE_TIMESTAMP, timestamp);
                }
                window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, UNPContentWrapper.ReturnValueNames.LocationSliderReturn + UNPContentWrapper.LogMessages.SliderChoice + numLocationPosition);
                window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, UNPContentWrapper.ReturnValueNames.SpeechRecognitionSliderReturn + UNPContentWrapper.LogMessages.SliderChoice + numSpeechRecognitionPosition);
                window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, UNPContentWrapper.ReturnValueNames.DiagnosticsSliderReturn + UNPContentWrapper.LogMessages.SliderChoice + numDiagnosticsPosition);
                window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, UNPContentWrapper.ReturnValueNames.TailoredExperiencesSliderReturn + UNPContentWrapper.LogMessages.SliderChoice + numTailoredExperiencesPosition);
                window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, UNPContentWrapper.ReturnValueNames.RelevantAdsSliderReturn + UNPContentWrapper.LogMessages.SliderChoice + numRelevantAdsPosition);
                var locationSliderDefault = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.PrivacySettingsChoiceSlideViewModel.LocationSliderPositionBasedOnCurrentSettings);
                var speechRecognitionSliderDefault = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.PrivacySettingsChoiceSlideViewModel.SpeechSliderPositionBasedOnCurrentSettings);
                var diagnosticsSliderDefault = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.PrivacySettingsChoiceSlideViewModel.DiagnosticsSliderPositionBasedOnCurrentSettings);
                var tailoredExperiencesSliderDefault = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.PrivacySettingsChoiceSlideViewModel.TailoredExperiencesSliderPositionBasedOnCurrentSettings);
                var relevantAdsSliderDefault = UNPContentWrapper.PrivacyHelpers.SliderPositionToNumber(UNPContentWrapper.PrivacySettingsChoiceSlideViewModel.RelevantAdsSliderPositionBasedOnCurrentSettings);
                UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.PrivacyTelemetrySchema.SliderChoices, UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(locationSliderDefault), UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(speechRecognitionSliderDefault), UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(diagnosticsSliderDefault), UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(tailoredExperiencesSliderDefault), UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(relevantAdsSliderDefault), UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(numLocationPosition), UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(numSpeechRecognitionPosition), UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(numDiagnosticsPosition), UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(numTailoredExperiencesPosition), UNPContentWrapper.PrivacyHelpers.NumberSliderPositionToString(numRelevantAdsPosition));
                window.external.SetSettingSliderDefault(numLocationPosition, numSpeechRecognitionPosition, numDiagnosticsPosition, numTailoredExperiencesPosition, numRelevantAdsPosition);
                var lastError = window.external.GetLastJSError();
                if (lastError != UNPContentWrapper.HRESULT.S_OK) {
                    return _this.goToErrorPage(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId(), lastError);
                }
                if (UNPContentWrapper.PrivacyHelpers.MachineHasEngagedRestart()) {
                    return new UNPContentWrapper.PrivacySettingsConfirmationWithEngagedRestartSlideViewModel(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId());
                }
                else {
                    return new UNPContentWrapper.PrivacySettingsConfirmationSlideViewModel(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId());
                }
            };
            this.GetClickHandlers = function () {
                var clickHandlerDictionary;
                clickHandlerDictionary = new UNPContentWrapper.Dictionary();
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.BackButtonName, function () { return _this.SettingChoiceOnAllButtonClicks(UNPContentWrapper.ClickHandlerNames.BackButtonName, _this.OnBackButtonClick, _this.CurrentView.GetSlideId()); });
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.LearnMoreButtonName, function () { return _this.SettingChoiceOnAllButtonClicks(UNPContentWrapper.ClickHandlerNames.LearnMoreButtonName, _this.OnLearnMoreClick, _this.CurrentView.GetSlideId()); });
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.SaveButtonName, function () { return _this.SettingChoiceOnAllButtonClicks(UNPContentWrapper.ClickHandlerNames.SaveButtonName, _this.OnSaveButtonClick, _this.CurrentView.GetSlideId()); });
                return clickHandlerDictionary;
            };
            this.SettingChoiceOnAllButtonClicks = function (ButtonName, buttonFunction, CurrentSlideID) {
                var PageChoice = _this.LogIDOnClick(ButtonName, buttonFunction, CurrentSlideID);
                if (!UNPContentWrapper.PrivacySettingsChoiceSlideViewModel.StoreMostRecentSliderChoices(_this)) {
                    return _this.goToErrorPage(_this.CurrentView.GetSlideHistoryArray(), CurrentSlideID, UNPContentWrapper.HRESULT.E_INVALIDARG);
                }
                return PageChoice;
            };
        }
        return SettingsChoiceClickHandlers;
    })(UNPContentWrapper.PrivacyClickHandlerBase);
    UNPContentWrapper.SettingsChoiceClickHandlers = SettingsChoiceClickHandlers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var SettingsConfirmationClickHandlers = (function (_super) {
        __extends(SettingsConfirmationClickHandlers, _super);
        function SettingsConfirmationClickHandlers(CurrentViewModel) {
            var _this = this;
            _super.call(this, CurrentViewModel);
            this.OnDoneClick = function () {
                UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.PrivacyTelemetrySchema.UserUnblockCreatorsUpdate, window.external.GetCurrentUserSID(), Math.floor(Date.now() / 1000).toString());
                window.external.SetSettingSliderDone();
                var lastError = window.external.GetLastJSError();
                if (lastError != UNPContentWrapper.HRESULT.S_OK) {
                    return _this.goToErrorPage(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId(), lastError);
                }
                window.external.LaunchFeebackUX();
                return _this.tryCloseWindow(_this.CurrentView.GetSlideHistoryArray(), _this.CurrentView.GetSlideId());
            };
            this.GetClickHandlers = function () {
                var clickHandlerDictionary;
                clickHandlerDictionary = new UNPContentWrapper.Dictionary();
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.BackButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.BackButtonName, _this.OnBackButtonClick, _this.CurrentView.GetSlideId()); });
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.RemindMeLaterButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.RemindMeLaterButtonName, _this.OnRemindMeLater, _this.CurrentView.GetSlideId()); });
                clickHandlerDictionary.add(UNPContentWrapper.ClickHandlerNames.DoneButtonName, function () { return _this.LogIDOnClick(UNPContentWrapper.ClickHandlerNames.DoneButtonName, _this.OnDoneClick, _this.CurrentView.GetSlideId()); });
                return clickHandlerDictionary;
            };
        }
        return SettingsConfirmationClickHandlers;
    })(UNPContentWrapper.PrivacyClickHandlerBase);
    UNPContentWrapper.SettingsConfirmationClickHandlers = SettingsConfirmationClickHandlers;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyLandingSlideViewModel = (function (_super) {
        __extends(PrivacyLandingSlideViewModel, _super);
        function PrivacyLandingSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacyDefaultLanding, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacyLandingSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacyLandingSlideViewModel.prototype.SetClickHandlers = function () {
            var DefaultClickHandlers;
            DefaultClickHandlers = new UNPContentWrapper.PrivacyLandingClickHandlers(this);
            this.ClickHandlers = DefaultClickHandlers.GetClickHandlers();
        };
        return PrivacyLandingSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacyLandingSlideViewModel = PrivacyLandingSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyLandingLastReminderSlideViewModel = (function (_super) {
        __extends(PrivacyLandingLastReminderSlideViewModel, _super);
        function PrivacyLandingLastReminderSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacyDefaultLandingLastReminder, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacyLandingLastReminderSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacyLandingLastReminderSlideViewModel.prototype.SetClickHandlers = function () {
            var DefaultClickHandlers;
            DefaultClickHandlers = new UNPContentWrapper.PrivacyLandingClickHandlers(this);
            this.ClickHandlers = DefaultClickHandlers.GetClickHandlers();
        };
        return PrivacyLandingLastReminderSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacyLandingLastReminderSlideViewModel = PrivacyLandingLastReminderSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyLandingNoReminderSlideViewModel = (function (_super) {
        __extends(PrivacyLandingNoReminderSlideViewModel, _super);
        function PrivacyLandingNoReminderSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacyDefaultLandingNoReminder, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacyLandingNoReminderSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacyLandingNoReminderSlideViewModel.prototype.SetClickHandlers = function () {
            var DefaultClickHandlers;
            DefaultClickHandlers = new UNPContentWrapper.PrivacyLandingClickHandlers(this);
            this.ClickHandlers = DefaultClickHandlers.GetClickHandlers();
        };
        return PrivacyLandingNoReminderSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacyLandingNoReminderSlideViewModel = PrivacyLandingNoReminderSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyLandingTH2SlideViewModel = (function (_super) {
        __extends(PrivacyLandingTH2SlideViewModel, _super);
        function PrivacyLandingTH2SlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacyLandingTH2SlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacyLandingTH2SlideViewModel.prototype.SetClickHandlers = function () {
            var DefaultClickHandlers;
            DefaultClickHandlers = new UNPContentWrapper.PrivacyLandingClickHandlers(this);
            this.ClickHandlers = DefaultClickHandlers.GetClickHandlers();
        };
        return PrivacyLandingTH2SlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacyLandingTH2SlideViewModel = PrivacyLandingTH2SlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyLandingTH2LastReminderSlideViewModel = (function (_super) {
        __extends(PrivacyLandingTH2LastReminderSlideViewModel, _super);
        function PrivacyLandingTH2LastReminderSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2LastReminder, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacyLandingTH2LastReminderSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacyLandingTH2LastReminderSlideViewModel.prototype.SetClickHandlers = function () {
            var DefaultClickHandlers;
            DefaultClickHandlers = new UNPContentWrapper.PrivacyLandingClickHandlers(this);
            this.ClickHandlers = DefaultClickHandlers.GetClickHandlers();
        };
        return PrivacyLandingTH2LastReminderSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacyLandingTH2LastReminderSlideViewModel = PrivacyLandingTH2LastReminderSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyLandingTH2NoReminderSlideViewModel = (function (_super) {
        __extends(PrivacyLandingTH2NoReminderSlideViewModel, _super);
        function PrivacyLandingTH2NoReminderSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacyDefaultLandingTH2NoReminder, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacyLandingTH2NoReminderSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacyLandingTH2NoReminderSlideViewModel.prototype.SetClickHandlers = function () {
            var DefaultClickHandlers;
            DefaultClickHandlers = new UNPContentWrapper.PrivacyLandingClickHandlers(this);
            this.ClickHandlers = DefaultClickHandlers.GetClickHandlers();
        };
        return PrivacyLandingTH2NoReminderSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacyLandingTH2NoReminderSlideViewModel = PrivacyLandingTH2NoReminderSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyReminderSlideViewModel = (function (_super) {
        __extends(PrivacyReminderSlideViewModel, _super);
        function PrivacyReminderSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacyReminder, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacyReminderSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacyReminderSlideViewModel.prototype.SetClickHandlers = function () {
            var ReminderHandlers;
            ReminderHandlers = new UNPContentWrapper.ReminderClickHandlers(this);
            this.ClickHandlers = ReminderHandlers.GetClickHandlers();
        };
        return PrivacyReminderSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacyReminderSlideViewModel = PrivacyReminderSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacySettingsChoiceSlideViewModel = (function (_super) {
        __extends(PrivacySettingsChoiceSlideViewModel, _super);
        function PrivacySettingsChoiceSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacySettingsChoice, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacySettingsChoiceSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var locationSliderDefault = UNPContentWrapper.SliderPosition.ERROR;
            var speechRecognitionSliderDefault = UNPContentWrapper.SliderPosition.ERROR;
            var diagnosticsSliderDefault = UNPContentWrapper.SliderPosition.ERROR;
            var tailoredExperiencesSliderDefault = UNPContentWrapper.SliderPosition.ERROR;
            var relevantAdsSliderDefault = UNPContentWrapper.SliderPosition.ERROR;
            if (PrivacySettingsChoiceSlideViewModel.MostRecentLocationSliderPosition === UNPContentWrapper.SliderPosition.ERROR ||
                PrivacySettingsChoiceSlideViewModel.MostRecentSpeechSliderPosition === UNPContentWrapper.SliderPosition.ERROR ||
                PrivacySettingsChoiceSlideViewModel.MostRecentDiagnosticsSliderPosition === UNPContentWrapper.SliderPosition.ERROR ||
                PrivacySettingsChoiceSlideViewModel.MostRecentTailoredExperiencesSliderPosition === UNPContentWrapper.SliderPosition.ERROR ||
                PrivacySettingsChoiceSlideViewModel.MostRecentRelevantAdsSliderPosition === UNPContentWrapper.SliderPosition.ERROR) {
                UNPContentWrapper.PrivacyHelpers.SendTelemetryOnSliderInputs();
                if (UNPContentWrapper.PrivacyHelpers.MachineHasEngagedRestart()) {
                    locationSliderDefault = UNPContentWrapper.PrivacyHelpers.NumberToSliderPosition(window.external.GetLocationSliderDefault());
                }
                else {
                    locationSliderDefault = UNPContentWrapper.PrivacyHelpers.NumberToSliderPosition(UNPContentWrapper.PrivacyHelpers.GetLocationSliderDefault());
                }
                speechRecognitionSliderDefault = UNPContentWrapper.PrivacyHelpers.NumberToSliderPosition(window.external.GetSpeechRecognitionSliderDefault());
                diagnosticsSliderDefault = UNPContentWrapper.PrivacyHelpers.NumberToSliderPosition(window.external.GetDiagnosticsSliderDefault());
                tailoredExperiencesSliderDefault = UNPContentWrapper.PrivacyHelpers.NumberToSliderPosition(window.external.GetTailoredExperiencesSliderDefault());
                relevantAdsSliderDefault = UNPContentWrapper.PrivacyHelpers.NumberToSliderPosition(window.external.GetRelevantAdsSliderDefault());
                PrivacySettingsChoiceSlideViewModel.StoreSliderPositionBasedOnCurrentSettings(locationSliderDefault, speechRecognitionSliderDefault, diagnosticsSliderDefault, tailoredExperiencesSliderDefault, relevantAdsSliderDefault);
                var localStateRegKey = UNPContentWrapper.RegistryHelpers.GetHKLMContentLocalStateRegistryLocation();
                if (localStateRegKey !== null && localStateRegKey !== undefined) {
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_LOCATION, locationSliderDefault);
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_SPEECH, speechRecognitionSliderDefault);
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_DIAGNOSTICS, diagnosticsSliderDefault);
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_TAILOREDEXPERIENCES, tailoredExperiencesSliderDefault);
                    UNPContentWrapper.RegistryHelpers.WriteMachineDWORD(localStateRegKey, UNPContentWrapper.PrivacyRegistryHelpers.HKLM_SLIDER_POSITION_DEFAULT_RELEVANTADS, relevantAdsSliderDefault);
                }
                UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.PrivacyTelemetrySchema.SliderDefaults, UNPContentWrapper.PrivacyHelpers.SliderPositionToString(locationSliderDefault), UNPContentWrapper.PrivacyHelpers.SliderPositionToString(speechRecognitionSliderDefault), UNPContentWrapper.PrivacyHelpers.SliderPositionToString(diagnosticsSliderDefault), UNPContentWrapper.PrivacyHelpers.SliderPositionToString(tailoredExperiencesSliderDefault), UNPContentWrapper.PrivacyHelpers.SliderPositionToString(relevantAdsSliderDefault));
            }
            else {
                locationSliderDefault = PrivacySettingsChoiceSlideViewModel.MostRecentLocationSliderPosition;
                speechRecognitionSliderDefault = PrivacySettingsChoiceSlideViewModel.MostRecentSpeechSliderPosition;
                diagnosticsSliderDefault = PrivacySettingsChoiceSlideViewModel.MostRecentDiagnosticsSliderPosition;
                tailoredExperiencesSliderDefault = PrivacySettingsChoiceSlideViewModel.MostRecentTailoredExperiencesSliderPosition;
                relevantAdsSliderDefault = PrivacySettingsChoiceSlideViewModel.MostRecentRelevantAdsSliderPosition;
                UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.PrivacyTelemetrySchema.SettingsChoiceReturnToSlideView, UNPContentWrapper.PrivacyHelpers.SliderPositionToString(locationSliderDefault), UNPContentWrapper.PrivacyHelpers.SliderPositionToString(speechRecognitionSliderDefault), UNPContentWrapper.PrivacyHelpers.SliderPositionToString(diagnosticsSliderDefault), UNPContentWrapper.PrivacyHelpers.SliderPositionToString(tailoredExperiencesSliderDefault), UNPContentWrapper.PrivacyHelpers.SliderPositionToString(relevantAdsSliderDefault));
            }
            var initValues = new UNPContentWrapper.Dictionary();
            initValues.add(UNPContentWrapper.InitializationValueNames.LocationSliderDefault, locationSliderDefault);
            initValues.add(UNPContentWrapper.InitializationValueNames.SpeechRecognitionSliderDefault, speechRecognitionSliderDefault);
            initValues.add(UNPContentWrapper.InitializationValueNames.DiagnosticsSliderDefault, diagnosticsSliderDefault);
            initValues.add(UNPContentWrapper.InitializationValueNames.TailoredExperiencesSliderDefault, tailoredExperiencesSliderDefault);
            initValues.add(UNPContentWrapper.InitializationValueNames.RelevantAdsSliderDefault, relevantAdsSliderDefault);
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacySettingsChoiceSlideViewModel.prototype.SetClickHandlers = function () {
            var ChoiceHandlers;
            ChoiceHandlers = new UNPContentWrapper.SettingsChoiceClickHandlers(this);
            this.ClickHandlers = ChoiceHandlers.GetClickHandlers();
        };
        PrivacySettingsChoiceSlideViewModel.StoreMostRecentSliderChoices = function (clickHandler) {
            var returnValues;
            if (!(clickHandler instanceof UNPContentWrapper.SettingsChoiceClickHandlers)) {
                return false;
            }
            returnValues = clickHandler.CurrentView.GetSlideReturnValues();
            if (returnValues === undefined || returnValues === null) {
                return false;
            }
            PrivacySettingsChoiceSlideViewModel.MostRecentLocationSliderPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.LocationSliderReturn);
            PrivacySettingsChoiceSlideViewModel.MostRecentSpeechSliderPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.SpeechRecognitionSliderReturn);
            PrivacySettingsChoiceSlideViewModel.MostRecentDiagnosticsSliderPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.DiagnosticsSliderReturn);
            PrivacySettingsChoiceSlideViewModel.MostRecentTailoredExperiencesSliderPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.TailoredExperiencesSliderReturn);
            PrivacySettingsChoiceSlideViewModel.MostRecentRelevantAdsSliderPosition = returnValues.GetValueForKey(UNPContentWrapper.ReturnValueNames.RelevantAdsSliderReturn);
            window.external.LogInfo(UNPContentWrapper.HRESULT.S_OK, "User navigated away from SliderChoice, saving values for next view within session: "
                + " Location = " + UNPContentWrapper.PrivacyHelpers.SliderPositionToString(PrivacySettingsChoiceSlideViewModel.MostRecentLocationSliderPosition)
                + " Speech = " + UNPContentWrapper.PrivacyHelpers.SliderPositionToString(PrivacySettingsChoiceSlideViewModel.MostRecentSpeechSliderPosition)
                + " Diagnostics = " + UNPContentWrapper.PrivacyHelpers.SliderPositionToString(PrivacySettingsChoiceSlideViewModel.MostRecentDiagnosticsSliderPosition)
                + " TailoredExperiences = " + UNPContentWrapper.PrivacyHelpers.SliderPositionToString(PrivacySettingsChoiceSlideViewModel.MostRecentTailoredExperiencesSliderPosition)
                + " RelevantAds = " + UNPContentWrapper.PrivacyHelpers.SliderPositionToString(PrivacySettingsChoiceSlideViewModel.MostRecentRelevantAdsSliderPosition));
            return true;
        };
        PrivacySettingsChoiceSlideViewModel.StoreSliderPositionBasedOnCurrentSettings = function (LocationSlider, SpeechSlider, DiagnosticsSlider, TailoredExperiencesSlider, RelevantAdsSlider) {
            PrivacySettingsChoiceSlideViewModel.LocationSliderPositionBasedOnCurrentSettings = LocationSlider;
            PrivacySettingsChoiceSlideViewModel.SpeechSliderPositionBasedOnCurrentSettings = SpeechSlider;
            PrivacySettingsChoiceSlideViewModel.DiagnosticsSliderPositionBasedOnCurrentSettings = DiagnosticsSlider;
            PrivacySettingsChoiceSlideViewModel.TailoredExperiencesSliderPositionBasedOnCurrentSettings = TailoredExperiencesSlider;
            PrivacySettingsChoiceSlideViewModel.RelevantAdsSliderPositionBasedOnCurrentSettings = RelevantAdsSlider;
        };
        PrivacySettingsChoiceSlideViewModel.MostRecentLocationSliderPosition = UNPContentWrapper.SliderPosition.ERROR;
        PrivacySettingsChoiceSlideViewModel.MostRecentSpeechSliderPosition = UNPContentWrapper.SliderPosition.ERROR;
        PrivacySettingsChoiceSlideViewModel.MostRecentDiagnosticsSliderPosition = UNPContentWrapper.SliderPosition.ERROR;
        PrivacySettingsChoiceSlideViewModel.MostRecentTailoredExperiencesSliderPosition = UNPContentWrapper.SliderPosition.ERROR;
        PrivacySettingsChoiceSlideViewModel.MostRecentRelevantAdsSliderPosition = UNPContentWrapper.SliderPosition.ERROR;
        PrivacySettingsChoiceSlideViewModel.LocationSliderPositionBasedOnCurrentSettings = UNPContentWrapper.SliderPosition.ERROR;
        PrivacySettingsChoiceSlideViewModel.SpeechSliderPositionBasedOnCurrentSettings = UNPContentWrapper.SliderPosition.ERROR;
        PrivacySettingsChoiceSlideViewModel.DiagnosticsSliderPositionBasedOnCurrentSettings = UNPContentWrapper.SliderPosition.ERROR;
        PrivacySettingsChoiceSlideViewModel.TailoredExperiencesSliderPositionBasedOnCurrentSettings = UNPContentWrapper.SliderPosition.ERROR;
        PrivacySettingsChoiceSlideViewModel.RelevantAdsSliderPositionBasedOnCurrentSettings = UNPContentWrapper.SliderPosition.ERROR;
        return PrivacySettingsChoiceSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacySettingsChoiceSlideViewModel = PrivacySettingsChoiceSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacySettingsConfirmationSlideViewModel = (function (_super) {
        __extends(PrivacySettingsConfirmationSlideViewModel, _super);
        function PrivacySettingsConfirmationSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacySettingsConfirmation, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacySettingsConfirmationSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacySettingsConfirmationSlideViewModel.prototype.SetClickHandlers = function () {
            var ConfirmationClickHandlers;
            ConfirmationClickHandlers = new UNPContentWrapper.SettingsConfirmationClickHandlers(this);
            this.ClickHandlers = ConfirmationClickHandlers.GetClickHandlers();
        };
        return PrivacySettingsConfirmationSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacySettingsConfirmationSlideViewModel = PrivacySettingsConfirmationSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacySettingsConfirmationWithEngagedRestartSlideViewModel = (function (_super) {
        __extends(PrivacySettingsConfirmationWithEngagedRestartSlideViewModel, _super);
        function PrivacySettingsConfirmationWithEngagedRestartSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacySettingsConfirmationWithEngagedRestart, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacySettingsConfirmationWithEngagedRestartSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacySettingsConfirmationWithEngagedRestartSlideViewModel.prototype.SetClickHandlers = function () {
            var ConfirmationClickHandlers;
            ConfirmationClickHandlers = new UNPContentWrapper.SettingsConfirmationClickHandlers(this);
            var handlers = ConfirmationClickHandlers.GetClickHandlers();
            handlers.remove(UNPContentWrapper.ClickHandlerNames.RemindMeLaterButtonName);
            this.ClickHandlers = handlers;
        };
        return PrivacySettingsConfirmationWithEngagedRestartSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacySettingsConfirmationWithEngagedRestartSlideViewModel = PrivacySettingsConfirmationWithEngagedRestartSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var PrivacyReminderWithEngagedRestartSlideViewModel = (function (_super) {
        __extends(PrivacyReminderWithEngagedRestartSlideViewModel, _super);
        function PrivacyReminderWithEngagedRestartSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.PrivacyReminderWithEngagedRestart, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        PrivacyReminderWithEngagedRestartSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        PrivacyReminderWithEngagedRestartSlideViewModel.prototype.SetClickHandlers = function () {
            var ReminderHandlers;
            ReminderHandlers = new UNPContentWrapper.ReminderClickHandlers(this);
            var handlers = ReminderHandlers.GetClickHandlers();
            handlers.remove(UNPContentWrapper.ClickHandlerNames.RemindMeLaterButtonName);
            this.ClickHandlers = handlers;
        };
        return PrivacyReminderWithEngagedRestartSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.PrivacyReminderWithEngagedRestartSlideViewModel = PrivacyReminderWithEngagedRestartSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var ErrorSlideViewModel = (function (_super) {
        __extends(ErrorSlideViewModel, _super);
        function ErrorSlideViewModel(slideViewHistory, previousSlideID) {
            var _this = this;
            _super.call(this, UNPContentWrapper.SlideIDs.Error, slideViewHistory, previousSlideID);
            this.SetErrorCode = function (hResult) {
                UNPContentWrapper.Telemetry.SendTelemetry(UNPContentWrapper.TelemetrySchema.ErrorPageShown, hResult.toString());
                var errorDictionary = new UNPContentWrapper.Dictionary();
                errorDictionary.add(UNPContentWrapper.InitializationValueNames.HresultErrorCode, hResult);
                _this.SetInitializationValues(errorDictionary);
            };
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        ErrorSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        ErrorSlideViewModel.prototype.SetClickHandlers = function () {
            var ErrorSlideClickHandlers;
            ErrorSlideClickHandlers = new UNPContentWrapper.ErrorClickHandlers(this);
            this.ClickHandlers = ErrorSlideClickHandlers.GetClickHandlers();
        };
        return ErrorSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.ErrorSlideViewModel = ErrorSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var LearnMorePrivacySlideViewModel = (function (_super) {
        __extends(LearnMorePrivacySlideViewModel, _super);
        function LearnMorePrivacySlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.LearnMorePrivacy, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        LearnMorePrivacySlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        LearnMorePrivacySlideViewModel.prototype.SetClickHandlers = function () {
            var LearnMoreClickHandlersObj;
            LearnMoreClickHandlersObj = new UNPContentWrapper.LearnMoreClickHandlers(this);
            this.ClickHandlers = LearnMoreClickHandlersObj.GetClickHandlers();
        };
        return LearnMorePrivacySlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.LearnMorePrivacySlideViewModel = LearnMorePrivacySlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
var UNPContentWrapper;
(function (UNPContentWrapper) {
    var LearnMoreCreatorsUpdateSlideViewModel = (function (_super) {
        __extends(LearnMoreCreatorsUpdateSlideViewModel, _super);
        function LearnMoreCreatorsUpdateSlideViewModel(slideViewHistory, previousSlideID) {
            _super.call(this, UNPContentWrapper.SlideIDs.LearnMoreCreatorsUpdate, slideViewHistory, previousSlideID);
            this.SetInitializationValuesInternal();
            this.SetClickHandlers();
            this.SlideReturnValues = null;
        }
        LearnMoreCreatorsUpdateSlideViewModel.prototype.SetInitializationValuesInternal = function () {
            var initValues = new UNPContentWrapper.Dictionary();
            this.InitializationValues = this.AddInitializationValueDefaults(initValues).DeepCopy();
        };
        LearnMoreCreatorsUpdateSlideViewModel.prototype.SetClickHandlers = function () {
            var LearnMoreClickHandlersObj;
            LearnMoreClickHandlersObj = new UNPContentWrapper.LearnMoreClickHandlers(this);
            this.ClickHandlers = LearnMoreClickHandlersObj.GetClickHandlers();
        };
        return LearnMoreCreatorsUpdateSlideViewModel;
    })(UNPContentWrapper.SlideChoiceViewModel);
    UNPContentWrapper.LearnMoreCreatorsUpdateSlideViewModel = LearnMoreCreatorsUpdateSlideViewModel;
})(UNPContentWrapper || (UNPContentWrapper = {}));
